package willatendo.pridelands.server.block;

import net.minecraft.core.Direction;
import net.minecraft.core.particles.ParticleTypes;
import net.minecraft.core.registries.Registries;
import net.minecraft.resources.ResourceKey;
import net.minecraft.util.valueproviders.ConstantInt;
import net.minecraft.util.valueproviders.UniformInt;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.properties.BlockSetType;
import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
import net.minecraft.world.level.material.MapColor;
import net.minecraft.world.level.material.PushReaction;
import willatendo.pridelands.server.block.blocks.BananaCakeBlock;
import willatendo.pridelands.server.block.blocks.BananaCandleCakeBlock;
import willatendo.pridelands.server.block.blocks.BongoBlock;
import willatendo.pridelands.server.block.blocks.PridelandsPortalBlock;
import willatendo.pridelands.server.utils.PridelandsUtils;
import willatendo.simplelibrary.server.registry.BlockRegistry;
import willatendo.simplelibrary.server.registry.SimpleHolder;
import willatendo.simplelibrary.server.registry.SimpleRegistry;
import willatendo.simplelibrary.server.util.SimpleUtils;

import java.util.function.Function;
import java.util.function.Supplier;

public final class PridelandsBlocks {
    public static final BlockRegistry BLOCKS = SimpleRegistry.createBlock(PridelandsUtils.ID);

    public static final SimpleHolder<Block> OUTSTONE = BLOCKS.registerBlock("outstone", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.5F, 6.0F));
    public static final SimpleHolder<SlabBlock> OUTSTONE_SLAB = BLOCKS.registerBlock("outstone_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(2.0F, 6.0F));
    public static final SimpleHolder<StairBlock> OUTSTONE_STAIRS = BLOCKS.registerBlock("outstone_stairs", properties -> new StairBlock(PridelandsBlocks.OUTSTONE.get().defaultBlockState(), properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.OUTSTONE.get()));
    public static final SimpleHolder<PressurePlateBlock> OUTSTONE_PRESSURE_PLATE = BLOCKS.registerBlock("outstone_pressure_plate", properties -> new PressurePlateBlock(BlockSetType.STONE, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).forceSolidOn().instrument(NoteBlockInstrument.BASEDRUM).noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<ButtonBlock> OUTSTONE_BUTTON = BLOCKS.registerBlock("outstone_button", properties -> new ButtonBlock(BlockSetType.STONE, 20, properties), () -> BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<Block> OUTSTONE_BRICKS = BLOCKS.registerBlock("outstone_bricks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.5F, 6.0F));
    public static final SimpleHolder<SlabBlock> OUTSTONE_BRICK_SLAB = BLOCKS.registerBlock("outstone_brick_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(2.0F, 6.0F));
    public static final SimpleHolder<StairBlock> OUTSTONE_BRICK_STAIRS = BLOCKS.registerBlock("outstone_brick_stairs", properties -> new StairBlock(PridelandsBlocks.OUTSTONE_BRICKS.get().defaultBlockState(), properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.OUTSTONE_BRICKS.get()));
    public static final SimpleHolder<WallBlock> OUTSTONE_BRICK_WALL = BLOCKS.registerBlock("outstone_brick_wall", WallBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.OUTSTONE_BRICKS.get()));
    public static final SimpleHolder<Block> PRIDESTONE = BLOCKS.registerBlock("pridestone", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.5F, 6.0F));
    public static final SimpleHolder<SlabBlock> PRIDESTONE_SLAB = BLOCKS.registerBlock("pridestone_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(2.0F, 6.0F));
    public static final SimpleHolder<StairBlock> PRIDESTONE_STAIRS = BLOCKS.registerBlock("pridestone_stairs", properties -> new StairBlock(PridelandsBlocks.PRIDESTONE.get().defaultBlockState(), properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.PRIDESTONE.get()));
    public static final SimpleHolder<PressurePlateBlock> PRIDESTONE_PRESSURE_PLATE = BLOCKS.registerBlock("pridestone_pressure_plate", properties -> new PressurePlateBlock(BlockSetType.STONE, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).forceSolidOn().instrument(NoteBlockInstrument.BASEDRUM).noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<ButtonBlock> PRIDESTONE_BUTTON = BLOCKS.registerBlock("pridestone_button", properties -> new ButtonBlock(BlockSetType.STONE, 20, properties), () -> BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<Block> PRIDESTONE_BRICKS = BLOCKS.registerBlock("pridestone_bricks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.5F, 6.0F));
    public static final SimpleHolder<SlabBlock> PRIDESTONE_BRICK_SLAB = BLOCKS.registerBlock("pridestone_brick_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(2.0F, 6.0F));
    public static final SimpleHolder<StairBlock> PRIDESTONE_BRICK_STAIRS = BLOCKS.registerBlock("pridestone_brick_stairs", properties -> new StairBlock(PridelandsBlocks.PRIDESTONE_BRICKS.get().defaultBlockState(), properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.PRIDESTONE_BRICKS.get()));
    public static final SimpleHolder<WallBlock> PRIDESTONE_BRICK_WALL = BLOCKS.registerBlock("pridestone_brick_wall", WallBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.PRIDESTONE_BRICKS.get()));
    public static final SimpleHolder<Block> CRACKED_PRIDESTONE_BRICKS = BLOCKS.registerBlock("cracked_pridestone_bricks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.5F, 6.0F));
    public static final SimpleHolder<Block> MOSSY_PRIDESTONE_BRICKS = BLOCKS.registerBlock("mossy_pridestone_bricks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.5F, 6.0F));
    public static final SimpleHolder<SlabBlock> MOSSY_PRIDESTONE_BRICK_SLAB = BLOCKS.registerBlock("mossy_pridestone_brick_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(2.0F, 6.0F));
    public static final SimpleHolder<StairBlock> MOSSY_PRIDESTONE_BRICK_STAIRS = BLOCKS.registerBlock("mossy_pridestone_brick_stairs", properties -> new StairBlock(PridelandsBlocks.MOSSY_PRIDESTONE_BRICKS.get().defaultBlockState(), properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.MOSSY_PRIDESTONE_BRICKS.get()));
    public static final SimpleHolder<WallBlock> MOSSY_PRIDESTONE_BRICK_WALL = BLOCKS.registerBlock("mossy_pridestone_brick_wall", WallBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.MOSSY_PRIDESTONE_BRICKS.get()));
    public static final SimpleHolder<DropExperienceBlock> PRIDESTONE_COAL_ORE = BLOCKS.registerBlock("pridestone_coal_ore", properties -> new DropExperienceBlock(UniformInt.of(0, 2), properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(3.0F, 3.0F));
    public static final SimpleHolder<DropExperienceBlock> PRIDESTONE_SILVER_ORE = BLOCKS.registerBlock("pridestone_silver_ore", properties -> new DropExperienceBlock(ConstantInt.of(0), properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(3.0F, 3.0F));
    public static final SimpleHolder<DropExperienceBlock> PRIDESTONE_PEACOCK_ORE = BLOCKS.registerBlock("pridestone_peacock_ore", properties -> new DropExperienceBlock(ConstantInt.of(0), properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(3.0F, 3.0F));
    public static final SimpleHolder<DropExperienceBlock> OUTSTONE_NUKA_ORE = BLOCKS.registerBlock("outstone_nuka_ore", properties -> new DropExperienceBlock(ConstantInt.of(0), properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(3.0F, 3.0F));
    public static final SimpleHolder<DropExperienceBlock> OUTSTONE_KIVULITE_ORE = BLOCKS.registerBlock("outstone_kivulite_ore", properties -> new DropExperienceBlock(ConstantInt.of(0), properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(3.0F, 3.0F));
    public static final SimpleHolder<Block> PRIDELANDS_PORTAL_FRAME = BLOCKS.registerBlock("pridelands_portal_frame", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).strength(-1.0F, 3600000.0F).noLootTable().isValidSpawn(SimpleUtils::never));
    public static final SimpleHolder<Block> PRIDELANDS_PORTAL = BLOCKS.registerBlock("pridelands_portal", PridelandsPortalBlock::new, () -> BlockBehaviour.Properties.of().noCollission().randomTicks().strength(-1.0F).sound(SoundType.GLASS).lightLevel(p_50884_ -> 11).pushReaction(PushReaction.BLOCK));
    public static final SimpleHolder<Block> OUTLANDS_PORTAL_FRAME = BLOCKS.registerBlock("outlands_portal_frame", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).instrument(NoteBlockInstrument.BASEDRUM).strength(-1.0F, 3600000.0F).noLootTable().isValidSpawn(SimpleUtils::never));
    public static final SimpleHolder<RotatedPillarBlock> RAFIKI_TREE_WOOD = BLOCKS.registerBlock("rafiki_tree_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(-1.0F, 3600000.0F).noLootTable().sound(SoundType.WOOD).isValidSpawn(SimpleUtils::never));
    public static final SimpleHolder<Block> RAFIKI_TREE_BARK = BLOCKS.registerBlock("rafiki_tree_bark", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASS).strength(-1.0F, 3600000.0F).noLootTable().sound(SoundType.WOOD).isValidSpawn(SimpleUtils::never));
    public static final SimpleHolder<RotatedPillarBlock> RAFIKI_TREE_LOG = BLOCKS.registerBlock("rafiki_tree_log", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(blockState -> blockState.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.TERRACOTTA_WHITE : MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(-1.0F, 3600000.0F).noLootTable().sound(SoundType.WOOD).isValidSpawn(SimpleUtils::never));
    public static final SimpleHolder<CarpetBlock> FUR_RUG = BLOCKS.registerBlock("fur_rug", CarpetBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).strength(0.1F).sound(SoundType.WOOL).ignitedByLava());
    public static final SimpleHolder<WoolCarpetBlock> WHITE_FUR_RUG = BLOCKS.registerBlock("white_fur_rug", properties -> new WoolCarpetBlock(DyeColor.WHITE, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.WHITE_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> ORANGE_FUR_RUG = BLOCKS.registerBlock("orange_fur_rug", properties -> new WoolCarpetBlock(DyeColor.ORANGE, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.ORANGE_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> MAGENTA_FUR_RUG = BLOCKS.registerBlock("magenta_fur_rug", properties -> new WoolCarpetBlock(DyeColor.MAGENTA, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.MAGENTA_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> LIGHT_BLUE_FUR_RUG = BLOCKS.registerBlock("light_blue_fur_rug", properties -> new WoolCarpetBlock(DyeColor.LIGHT_BLUE, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.LIGHT_BLUE_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> YELLOW_FUR_RUG = BLOCKS.registerBlock("yellow_fur_rug", properties -> new WoolCarpetBlock(DyeColor.YELLOW, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.YELLOW_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> LIME_FUR_RUG = BLOCKS.registerBlock("lime_fur_rug", properties -> new WoolCarpetBlock(DyeColor.LIME, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.LIME_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> PINK_FUR_RUG = BLOCKS.registerBlock("pink_fur_rug", properties -> new WoolCarpetBlock(DyeColor.PINK, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.PINK_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> GRAY_FUR_RUG = BLOCKS.registerBlock("gray_fur_rug", properties -> new WoolCarpetBlock(DyeColor.GRAY, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.GRAY_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> LIGHT_GRAY_FUR_RUG = BLOCKS.registerBlock("light_gray_fur_rug", properties -> new WoolCarpetBlock(DyeColor.LIGHT_GRAY, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.LIGHT_GRAY_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> CYAN_FUR_RUG = BLOCKS.registerBlock("cyan_fur_rug", properties -> new WoolCarpetBlock(DyeColor.CYAN, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CYAN_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> PURPLE_FUR_RUG = BLOCKS.registerBlock("purple_fur_rug", properties -> new WoolCarpetBlock(DyeColor.PURPLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.PURPLE_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> BLUE_FUR_RUG = BLOCKS.registerBlock("blue_fur_rug", properties -> new WoolCarpetBlock(DyeColor.BLUE, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.BLUE_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> BROWN_FUR_RUG = BLOCKS.registerBlock("brown_fur_rug", properties -> new WoolCarpetBlock(DyeColor.BROWN, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.BROWN_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> GREEN_FUR_RUG = BLOCKS.registerBlock("green_fur_rug", properties -> new WoolCarpetBlock(DyeColor.GREEN, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.GREEN_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> RED_FUR_RUG = BLOCKS.registerBlock("red_fur_rug", properties -> new WoolCarpetBlock(DyeColor.RED, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.RED_CARPET));
    public static final SimpleHolder<WoolCarpetBlock> BLACK_FUR_RUG = BLOCKS.registerBlock("black_fur_rug", properties -> new WoolCarpetBlock(DyeColor.BLACK, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.BLACK_CARPET));
    public static final SimpleHolder<BananaCakeBlock> BANANA_CAKE = BLOCKS.registerBlock("banana_cake", BananaCakeBlock::new, () -> BlockBehaviour.Properties.of().forceSolidOn().strength(0.5F).sound(SoundType.WOOL).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<BananaCandleCakeBlock> BANANA_CANDLE_CAKE = BLOCKS.registerBlock("banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CAKE.get()).lightLevel(SimpleUtils.litBlockEmission(3)));
    public static final SimpleHolder<BananaCandleCakeBlock> WHITE_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("white_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.WHITE_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> ORANGE_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("orange_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.ORANGE_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> MAGENTA_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("magenta_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.MAGENTA_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> LIGHT_BLUE_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("light_blue_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.LIGHT_BLUE_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> YELLOW_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("yellow_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.YELLOW_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> LIME_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("lime_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.LIME_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> PINK_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("pink_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.PINK_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> GRAY_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("gray_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.GRAY_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> LIGHT_GRAY_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("light_gray_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.LIGHT_GRAY_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> CYAN_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("cyan_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.CYAN_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> PURPLE_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("purple_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.PURPLE_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> BLUE_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("blue_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.BLUE_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> BROWN_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("brown_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.BROWN_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> GREEN_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("green_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.GREEN_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> RED_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("red_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.RED_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BananaCandleCakeBlock> BLACK_BANANA_CANDLE_CAKE = BLOCKS.registerBlock("black_banana_candle_cake", properties -> new BananaCandleCakeBlock(Blocks.BLACK_CANDLE, properties), () -> BlockBehaviour.Properties.ofFullCopy(PridelandsBlocks.BANANA_CANDLE_CAKE.get()));
    public static final SimpleHolder<BongoBlock> ACACIA_BONGO = BLOCKS.registerBlock("acacia_bongo", BongoBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<BongoBlock> BANANA_BONGO = BLOCKS.registerBlock("banana_bongo", BongoBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<BongoBlock> DEAD_WOOD_BONGO = BLOCKS.registerBlock("dead_wood_bongo", BongoBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<BongoBlock> MANGO_BONGO = BLOCKS.registerBlock("mango_bongo", BongoBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<BongoBlock> PASSION_BONGO = BLOCKS.registerBlock("passion_bongo", BongoBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<BongoBlock> RAINFOREST_BONGO = BLOCKS.registerBlock("rainforest_bongo", BongoBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<TorchBlock> HYENA_BONE_TORCH = BLOCKS.registerBlock("hyena_bone_torch", properties -> new TorchBlock(ParticleTypes.FLAME, properties), () -> BlockBehaviour.Properties.of().noCollission().instabreak().lightLevel(blockState -> 14).sound(SoundType.WOOD).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<WallTorchBlock> HYENA_BONE_WALL_TORCH = BLOCKS.registerBlock("hyena_bone_wall_torch", properties -> new WallTorchBlock(ParticleTypes.FLAME, properties), () -> PridelandsBlocks.wallVariant(PridelandsBlocks.HYENA_BONE_TORCH.get(), true).noCollission().instabreak().lightLevel(blockState -> 14).sound(SoundType.WOOD).pushReaction(PushReaction.DESTROY));

    private static BlockBehaviour.Properties wallVariant(Block baseBlock, boolean overrideDescription) {
        BlockBehaviour.Properties properties = BlockBehaviour.Properties.of().overrideLootTable(baseBlock.getLootTable());
        if (overrideDescription) {
            properties = properties.overrideDescription(baseBlock.getDescriptionId());
        }
        return properties;
    }
}
