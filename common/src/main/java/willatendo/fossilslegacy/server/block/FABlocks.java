package willatendo.fossilslegacy.server.block;

import net.minecraft.core.Direction;
import net.minecraft.core.registries.Registries;
import net.minecraft.resources.ResourceKey;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
import net.minecraft.world.level.block.state.properties.WoodType;
import net.minecraft.world.level.material.MapColor;
import net.minecraft.world.level.material.PushReaction;
import willatendo.fossilslegacy.server.block.blocks.SkullBlock;
import willatendo.fossilslegacy.server.block.blocks.*;
import willatendo.fossilslegacy.server.block.cauldron.FACauldronInteraction;
import willatendo.fossilslegacy.server.fluid.FAFluids;
import willatendo.fossilslegacy.server.utils.FAUtils;
import willatendo.simplelibrary.server.registry.SimpleHolder;
import willatendo.simplelibrary.server.registry.SimpleRegistry;
import willatendo.simplelibrary.server.util.SimpleUtils;

import java.util.function.Function;
import java.util.function.Supplier;

public final class FABlocks {
    public static final SimpleRegistry<Block> BLOCKS = SimpleRegistry.create(Registries.BLOCK, FAUtils.ID);

    public static final SimpleHolder<Block> FOSSIL_ORE = FABlocks.register("fossil_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(3.0F, 3.0F));
    public static final SimpleHolder<Block> DEEPSLATE_FOSSIL_ORE = FABlocks.register("deepslate_fossil_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.DEEPSLATE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE));
    public static final SimpleHolder<SkullBlock> SKULL_BLOCK = FABlocks.register("skull_block", SkullBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.XYLOPHONE).sound(SoundType.BONE_BLOCK).strength(1.0F));
    public static final SimpleHolder<GenericSkullBlock> SKULL_LANTERN_BLOCK = FABlocks.register("skull_lantern_block", GenericSkullBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.XYLOPHONE).sound(SoundType.BONE_BLOCK).strength(1.0F).lightLevel(blockState -> 15));
    public static final SimpleHolder<AnalyzerBlock> ANALYZER = FABlocks.register("analyzer", AnalyzerBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL));
    public static final SimpleHolder<CultivatorBlock> WHITE_CULTIVATOR = FABlocks.register("white_cultivator", properties -> new CultivatorBlock(DyeColor.WHITE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> ORANGE_CULTIVATOR = FABlocks.register("orange_cultivator", properties -> new CultivatorBlock(DyeColor.ORANGE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> MAGENTA_CULTIVATOR = FABlocks.register("magenta_cultivator", properties -> new CultivatorBlock(DyeColor.MAGENTA, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> LIGHT_BLUE_CULTIVATOR = FABlocks.register("light_blue_cultivator", properties -> new CultivatorBlock(DyeColor.LIGHT_BLUE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> YELLOW_CULTIVATOR = FABlocks.register("yellow_cultivator", properties -> new CultivatorBlock(DyeColor.YELLOW, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> LIME_CULTIVATOR = FABlocks.register("lime_cultivator", properties -> new CultivatorBlock(DyeColor.LIME, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> PINK_CULTIVATOR = FABlocks.register("pink_cultivator", properties -> new CultivatorBlock(DyeColor.PINK, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> GRAY_CULTIVATOR = FABlocks.register("gray_cultivator", properties -> new CultivatorBlock(DyeColor.GRAY, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> LIGHT_GRAY_CULTIVATOR = FABlocks.register("light_gray_cultivator", properties -> new CultivatorBlock(DyeColor.LIGHT_GRAY, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> CYAN_CULTIVATOR = FABlocks.register("cyan_cultivator", properties -> new CultivatorBlock(DyeColor.CYAN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> PURPLE_CULTIVATOR = FABlocks.register("purple_cultivator", properties -> new CultivatorBlock(DyeColor.PURPLE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> BLUE_CULTIVATOR = FABlocks.register("blue_cultivator", properties -> new CultivatorBlock(DyeColor.BLUE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> BROWN_CULTIVATOR = FABlocks.register("brown_cultivator", properties -> new CultivatorBlock(DyeColor.BROWN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> GREEN_CULTIVATOR = FABlocks.register("green_cultivator", properties -> new CultivatorBlock(DyeColor.GREEN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> RED_CULTIVATOR = FABlocks.register("red_cultivator", properties -> new CultivatorBlock(DyeColor.RED, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<CultivatorBlock> BLACK_CULTIVATOR = FABlocks.register("black_cultivator", properties -> new CultivatorBlock(DyeColor.BLACK, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ArchaeologyWorkbenchBlock> ARCHAEOLOGY_WORKBENCH = FABlocks.register("archaeology_workbench", ArchaeologyWorkbenchBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD));
    public static final SimpleHolder<PalaeontologyTableBlock> PALAEONTOLOGY_TABLE = FABlocks.register("palaeontology_table", PalaeontologyTableBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD));
    public static final SimpleHolder<DNARecombinatorBlock> DNA_RECOMBINATOR = FABlocks.register("dna_recombinator", DNARecombinatorBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL));
    public static final SimpleHolder<JurassicFernBlock> JURASSIC_FERN = FABlocks.register("jurassic_fern", JurassicFernBlock::new, () -> BlockBehaviour.Properties.of().noCollission().instabreak().randomTicks().sound(SoundType.GRASS));
    public static final SimpleHolder<HorsetailBlock> SHORT_HORSETAIL = FABlocks.register("short_horsetail", HorsetailBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ).ignitedByLava());
    public static final SimpleHolder<TallHorsetailBlock> TALL_HORSETAIL = FABlocks.register("tall_horsetail", TallHorsetailBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ).ignitedByLava());
    public static final SimpleHolder<DrumBlock> DRUM = FABlocks.register("drum", DrumBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD));
    public static final SimpleHolder<FeederBlock> FEEDER = FABlocks.register("feeder", FeederBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL));
    public static final SimpleHolder<PermafrostBlock> PERMAFROST = FABlocks.register("permafrost", PermafrostBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.CHIME).strength(0.5F).randomTicks().noOcclusion().sound(SoundType.GRAVEL));
    public static final SimpleHolder<IcedStoneBlock> ICED_STONE = FABlocks.register("iced_stone", IcedStoneBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.CHIME).requiresCorrectToolForDrops().strength(1.5F, 6.0F).randomTicks().noOcclusion());
    public static final SimpleHolder<AxolotlspawnBlock> AXOLOTLSPAWN = FABlocks.register("axolotlspawn", AxolotlspawnBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.WATER).instabreak().noOcclusion().noCollission().sound(SoundType.FROGSPAWN).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<TimeMachineBlock> TIME_MACHINE = FABlocks.register("time_machine", TimeMachineBlock::new, () -> BlockBehaviour.Properties.of().strength(0.3F).lightLevel(blockState -> 14).sound(SoundType.GLASS));
    public static final SimpleHolder<RawSoupCauldronBlock> RAW_CHICKEN_SOUP_CAULDRON = FABlocks.register("raw_chicken_soup_cauldron", properties -> new RawSoupCauldronBlock(FACauldronInteraction.RAW_CHICKEN_SOUP, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CAULDRON));
    public static final SimpleHolder<SoupCauldronBlock> COOKED_CHICKEN_SOUP_CAULDRON = FABlocks.register("cooked_chicken_soup_cauldron", properties -> new SoupCauldronBlock(FACauldronInteraction.COOKED_CHICKEN_SOUP, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CAULDRON));
    public static final SimpleHolder<RawSoupCauldronBlock> RAW_BERRY_MEDLEY_CAULDRON = FABlocks.register("raw_berry_medley_cauldron", properties -> new RawSoupCauldronBlock(FACauldronInteraction.RAW_BERRY_MEDLEY, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CAULDRON));
    public static final SimpleHolder<SoupCauldronBlock> COOKED_BERRY_MEDLEY_CAULDRON = FABlocks.register("cooked_berry_medley_cauldron", properties -> new SoupCauldronBlock(FACauldronInteraction.COOKED_BERRY_MEDLEY, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CAULDRON));
    public static final SimpleHolder<MayanVaseBlock> MAYAN_VASE = FABlocks.register("mayan_vase", MayanVaseBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).strength(0.0F, 0.0F).pushReaction(PushReaction.DESTROY).noOcclusion());
    public static final SimpleHolder<MayanVaseBlock> MAYAN_JADE_VASE = FABlocks.register("mayan_jade_vase", MayanVaseBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).strength(0.0F, 0.0F).pushReaction(PushReaction.DESTROY).noOcclusion());
    public static final SimpleHolder<MayanVaseBlock> MAYAN_OCELOT_VASE = FABlocks.register("mayan_ocelot_vase", MayanVaseBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).strength(0.0F, 0.0F).pushReaction(PushReaction.DESTROY).noOcclusion());
    public static final SimpleHolder<MayanVaseBlock> MAYAN_VILLAGER_VASE = FABlocks.register("mayan_villager_vase", MayanVaseBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).strength(0.0F, 0.0F).pushReaction(PushReaction.DESTROY).noOcclusion());
    public static final SimpleHolder<LlamaStatueBlock> IRON_LLAMA_STATUE = FABlocks.register("iron_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<WeatheringCopperLlamaStatueBlock> COPPER_LLAMA_STATUE = FABlocks.register("copper_llama_statue", properties -> new WeatheringCopperLlamaStatueBlock(WeatheringCopper.WeatherState.UNAFFECTED, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<WeatheringCopperLlamaStatueBlock> EXPOSED_COPPER_LLAMA_STATUE = FABlocks.register("exposed_copper_llama_statue", properties -> new WeatheringCopperLlamaStatueBlock(WeatheringCopper.WeatherState.EXPOSED, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<WeatheringCopperLlamaStatueBlock> WEATHERED_COPPER_LLAMA_STATUE = FABlocks.register("weathered_copper_llama_statue", properties -> new WeatheringCopperLlamaStatueBlock(WeatheringCopper.WeatherState.WEATHERED, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<WeatheringCopperLlamaStatueBlock> OXIDIZED_COPPER_LLAMA_STATUE = FABlocks.register("oxidized_copper_llama_statue", properties -> new WeatheringCopperLlamaStatueBlock(WeatheringCopper.WeatherState.OXIDIZED, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<LlamaStatueBlock> WAXED_COPPER_LLAMA_STATUE = FABlocks.register("waxed_copper_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<LlamaStatueBlock> WAXED_EXPOSED_COPPER_LLAMA_STATUE = FABlocks.register("waxed_exposed_copper_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<LlamaStatueBlock> WAXED_WEATHERED_COPPER_LLAMA_STATUE = FABlocks.register("waxed_weathered_copper_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<LlamaStatueBlock> WAXED_OXIDIZED_COPPER_LLAMA_STATUE = FABlocks.register("waxed_oxidized_copper_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<DecorationPostBlock> WHITE_DECORATION_POST = FABlocks.register("white_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.WHITE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> ORANGE_DECORATION_POST = FABlocks.register("orange_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.ORANGE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> MAGENTA_DECORATION_POST = FABlocks.register("magenta_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.MAGENTA_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> LIGHT_BLUE_DECORATION_POST = FABlocks.register("light_blue_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.LIGHT_BLUE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> YELLOW_DECORATION_POST = FABlocks.register("yellow_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.YELLOW_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> LIME_DECORATION_POST = FABlocks.register("lime_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.LIME_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> PINK_DECORATION_POST = FABlocks.register("pink_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.PINK_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> GRAY_DECORATION_POST = FABlocks.register("gray_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.GRAY_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> LIGHT_GRAY_DECORATION_POST = FABlocks.register("light_gray_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.LIGHT_GRAY_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> CYAN_DECORATION_POST = FABlocks.register("cyan_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CYAN_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> PURPLE_DECORATION_POST = FABlocks.register("purple_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.PURPLE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> BLUE_DECORATION_POST = FABlocks.register("blue_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.BLUE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> BROWN_DECORATION_POST = FABlocks.register("brown_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.BROWN_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> GREEN_DECORATION_POST = FABlocks.register("green_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.GREEN_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> RED_DECORATION_POST = FABlocks.register("red_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.RED_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> BLACK_DECORATION_POST = FABlocks.register("black_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.BLACK_CONCRETE));
    public static final SimpleHolder<CageBlock> SMALL_CAGE = FABlocks.register("small_cage", CageBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.5F, 6.0F).noOcclusion());
    public static final SimpleHolder<CycadHeadBlock> CYCAD_HEAD = FABlocks.register("cycad_head", CycadHeadBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava().noOcclusion().randomTicks());
    public static final SimpleHolder<CycadLogBlock> CYCAD_LOG = FABlocks.register("cycad_log", CycadLogBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<Block> LEPIDODENDRON_PLANKS = FABlocks.register("lepidodendron_planks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<SaplingBlock> LEPIDODENDRON_SAPLING = FABlocks.register("lepidodendron_sapling", properties -> new SaplingBlock(FATreeGrowers.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<RotatedPillarBlock> LEPIDODENDRON_LOG = FABlocks.register("lepidodendron_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_GREEN, MapColor.TERRACOTTA_BROWN));
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_LEPIDODENDRON_LOG = FABlocks.register("stripped_lepidodendron_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_GREEN, MapColor.TERRACOTTA_GREEN));
    public static final SimpleHolder<RotatedPillarBlock> LEPIDODENDRON_WOOD = FABlocks.register("lepidodendron_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_LEPIDODENDRON_WOOD = FABlocks.register("stripped_lepidodendron_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<LeavesBlock> LEPIDODENDRON_LEAVES = FABlocks.register("lepidodendron_leaves", LeavesBlock::new, () -> FABlocks.leavesProperties(SoundType.GRASS));
    public static final SimpleHolder<StairBlock> LEPIDODENDRON_STAIRS = FABlocks.registerStair("lepidodendron_stairs", FABlocks.LEPIDODENDRON_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> LEPIDODENDRON_SIGN = FABlocks.register("lepidodendron_sign", properties -> new FossilsStandingSignBlock(FAWoodTypes.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallSignBlock> LEPIDODENDRON_WALL_SIGN = FABlocks.registerWallSign("lepidodendron_wall_sign", FAWoodTypes.LEPIDODENDRON, FABlocks.LEPIDODENDRON_SIGN, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<DoorBlock> LEPIDODENDRON_DOOR = FABlocks.register("lepidodendron_door", properties -> new DoorBlock(FABlockSetTypes.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.LEPIDODENDRON_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> LEPIDODENDRON_HANGING_SIGN = FABlocks.register("lepidodendron_hanging_sign", properties -> new FossilsCeilingHangingSignBlock(FAWoodTypes.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.LEPIDODENDRON_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallHangingSignBlock> LEPIDODENDRON_WALL_HANGING_SIGN = FABlocks.registerWallHangingSign("lepidodendron_wall_hanging_sign", FAWoodTypes.LEPIDODENDRON, FABlocks.LEPIDODENDRON_HANGING_SIGN, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.LEPIDODENDRON_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<PressurePlateBlock> LEPIDODENDRON_PRESSURE_PLATE = FABlocks.register("lepidodendron_pressure_plate", properties -> new PressurePlateBlock(FABlockSetTypes.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.LEPIDODENDRON_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(0.5F).ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FenceBlock> LEPIDODENDRON_FENCE = FABlocks.register("lepidodendron_fence", FenceBlock::new, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.LEPIDODENDRON_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<TrapDoorBlock> LEPIDODENDRON_TRAPDOOR = FABlocks.register("lepidodendron_trapdoor", properties -> new TrapDoorBlock(FABlockSetTypes.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().isValidSpawn(SimpleUtils::never).ignitedByLava());
    public static final SimpleHolder<FenceGateBlock> LEPIDODENDRON_FENCE_GATE = FABlocks.register("lepidodendron_fence_gate", properties -> new FenceGateBlock(FAWoodTypes.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.LEPIDODENDRON_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).ignitedByLava());
    public static final SimpleHolder<FlowerPotBlock> POTTED_LEPIDODENDRON_SAPLING = FABlocks.register("potted_lepidodendron_sapling", properties -> new FlowerPotBlock(FABlocks.LEPIDODENDRON_SAPLING.get(), properties), FABlocks::flowerPotProperties);
    public static final SimpleHolder<ButtonBlock> LEPIDODENDRON_BUTTON = FABlocks.register("lepidodendron_button", properties -> new ButtonBlock(FABlockSetTypes.LEPIDODENDRON, 30, properties), FABlocks::buttonProperties);
    public static final SimpleHolder<SlabBlock> LEPIDODENDRON_SLAB = FABlocks.register("lepidodendron_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<Block> SIGILLARIA_PLANKS = FABlocks.register("sigillaria_planks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<SaplingBlock> SIGILLARIA_SAPLING = FABlocks.register("sigillaria_sapling", properties -> new SaplingBlock(FATreeGrowers.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<RotatedPillarBlock> SIGILLARIA_LOG = FABlocks.register("sigillaria_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_BLACK, MapColor.TERRACOTTA_GRAY));
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_SIGILLARIA_LOG = FABlocks.register("stripped_sigillaria_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_BLACK, MapColor.TERRACOTTA_BLACK));
    public static final SimpleHolder<RotatedPillarBlock> SIGILLARIA_WOOD = FABlocks.register("sigillaria_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GRAY).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_SIGILLARIA_WOOD = FABlocks.register("stripped_sigillaria_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<LeavesBlock> SIGILLARIA_LEAVES = FABlocks.register("sigillaria_leaves", LeavesBlock::new, () -> FABlocks.leavesProperties(SoundType.GRASS));
    public static final SimpleHolder<StairBlock> SIGILLARIA_STAIRS = FABlocks.registerStair("sigillaria_stairs", FABlocks.SIGILLARIA_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> SIGILLARIA_SIGN = FABlocks.register("sigillaria_sign", properties -> new FossilsStandingSignBlock(FAWoodTypes.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallSignBlock> SIGILLARIA_WALL_SIGN = FABlocks.registerWallSign("sigillaria_wall_sign", FAWoodTypes.SIGILLARIA, FABlocks.SIGILLARIA_SIGN, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<DoorBlock> SIGILLARIA_DOOR = FABlocks.register("sigillaria_door", properties -> new DoorBlock(FABlockSetTypes.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.SIGILLARIA_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> SIGILLARIA_HANGING_SIGN = FABlocks.register("sigillaria_hanging_sign", properties -> new FossilsCeilingHangingSignBlock(FAWoodTypes.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.SIGILLARIA_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallHangingSignBlock> SIGILLARIA_WALL_HANGING_SIGN = FABlocks.registerWallHangingSign("sigillaria_wall_hanging_sign", FAWoodTypes.SIGILLARIA, FABlocks.SIGILLARIA_HANGING_SIGN, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.SIGILLARIA_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<PressurePlateBlock> SIGILLARIA_PRESSURE_PLATE = FABlocks.register("sigillaria_pressure_plate", properties -> new PressurePlateBlock(FABlockSetTypes.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.SIGILLARIA_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(0.5F).ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FenceBlock> SIGILLARIA_FENCE = FABlocks.register("sigillaria_fence", FenceBlock::new, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.SIGILLARIA_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<TrapDoorBlock> SIGILLARIA_TRAPDOOR = FABlocks.register("sigillaria_trapdoor", properties -> new TrapDoorBlock(FABlockSetTypes.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().isValidSpawn(SimpleUtils::never).ignitedByLava());
    public static final SimpleHolder<FenceGateBlock> SIGILLARIA_FENCE_GATE = FABlocks.register("sigillaria_fence_gate", properties -> new FenceGateBlock(FAWoodTypes.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.SIGILLARIA_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).ignitedByLava());
    public static final SimpleHolder<FlowerPotBlock> POTTED_SIGILLARIA_SAPLING = FABlocks.register("potted_sigillaria_sapling", properties -> new FlowerPotBlock(FABlocks.SIGILLARIA_SAPLING.get(), properties), FABlocks::flowerPotProperties);
    public static final SimpleHolder<ButtonBlock> SIGILLARIA_BUTTON = FABlocks.register("sigillaria_button", properties -> new ButtonBlock(FABlockSetTypes.SIGILLARIA, 30, properties), FABlocks::buttonProperties);
    public static final SimpleHolder<SlabBlock> SIGILLARIA_SLAB = FABlocks.register("sigillaria_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<Block> CALAMITES_PLANKS = FABlocks.register("calamites_planks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<SaplingBlock> CALAMITES_SAPLING = FABlocks.register("calamites_sapling", properties -> new SaplingBlock(FATreeGrowers.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<RotatedPillarBlock> CALAMITES_LOG = FABlocks.register("calamites_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_BROWN, MapColor.TERRACOTTA_GREEN));
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_CALAMITES_LOG = FABlocks.register("stripped_calamites_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_BROWN, MapColor.TERRACOTTA_BROWN));
    public static final SimpleHolder<RotatedPillarBlock> CALAMITES_WOOD = FABlocks.register("calamites_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_CALAMITES_WOOD = FABlocks.register("stripped_calamites_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<LeavesBlock> CALAMITES_LEAVES = FABlocks.register("calamites_leaves", LeavesBlock::new, () -> FABlocks.leavesProperties(SoundType.GRASS));
    public static final SimpleHolder<StairBlock> CALAMITES_STAIRS = FABlocks.registerStair("calamites_stairs", FABlocks.CALAMITES_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> CALAMITES_SIGN = FABlocks.register("calamites_sign", properties -> new FossilsStandingSignBlock(FAWoodTypes.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallSignBlock> CALAMITES_WALL_SIGN = FABlocks.registerWallSign("calamites_wall_sign", FAWoodTypes.CALAMITES, FABlocks.CALAMITES_SIGN, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<DoorBlock> CALAMITES_DOOR = FABlocks.register("calamites_door", properties -> new DoorBlock(FABlockSetTypes.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.CALAMITES_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> CALAMITES_HANGING_SIGN = FABlocks.register("calamites_hanging_sign", properties -> new FossilsCeilingHangingSignBlock(FAWoodTypes.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.CALAMITES_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallHangingSignBlock> CALAMITES_WALL_HANGING_SIGN = FABlocks.registerWallHangingSign("calamites_wall_hanging_sign", FAWoodTypes.CALAMITES, FABlocks.CALAMITES_HANGING_SIGN, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.CALAMITES_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<PressurePlateBlock> CALAMITES_PRESSURE_PLATE = FABlocks.register("calamites_pressure_plate", properties -> new PressurePlateBlock(FABlockSetTypes.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.CALAMITES_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(0.5F).ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FenceBlock> CALAMITES_FENCE = FABlocks.register("calamites_fence", FenceBlock::new, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.CALAMITES_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<TrapDoorBlock> CALAMITES_TRAPDOOR = FABlocks.register("calamites_trapdoor", properties -> new TrapDoorBlock(FABlockSetTypes.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().isValidSpawn(SimpleUtils::never).ignitedByLava());
    public static final SimpleHolder<FenceGateBlock> CALAMITES_FENCE_GATE = FABlocks.register("calamites_fence_gate", properties -> new FenceGateBlock(FAWoodTypes.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.CALAMITES_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).ignitedByLava());
    public static final SimpleHolder<FlowerPotBlock> POTTED_CALAMITES_SAPLING = FABlocks.register("potted_calamites_sapling", properties -> new FlowerPotBlock(FABlocks.CALAMITES_SAPLING.get(), properties), FABlocks::flowerPotProperties);
    public static final SimpleHolder<ButtonBlock> CALAMITES_BUTTON = FABlocks.register("calamites_button", properties -> new ButtonBlock(FABlockSetTypes.CALAMITES, 30, properties), FABlocks::buttonProperties);
    public static final SimpleHolder<SlabBlock> CALAMITES_SLAB = FABlocks.register("calamites_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<Block> ARCHAEOPTERIS_PLANKS = FABlocks.register("archaeopteris_planks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<SaplingBlock> ARCHAEOPTERIS_SAPLING = FABlocks.register("archaeopteris_sapling", properties -> new SaplingBlock(FATreeGrowers.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<RotatedPillarBlock> ARCHAEOPTERIS_LOG = FABlocks.register("archaeopteris_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_YELLOW, MapColor.TERRACOTTA_BROWN));
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_ARCHAEOPTERIS_LOG = FABlocks.register("stripped_archaeopteris_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_BROWN, MapColor.TERRACOTTA_BROWN));
    public static final SimpleHolder<RotatedPillarBlock> ARCHAEOPTERIS_WOOD = FABlocks.register("archaeopteris_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_ARCHAEOPTERIS_WOOD = FABlocks.register("stripped_archaeopteris_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<LeavesBlock> ARCHAEOPTERIS_LEAVES = FABlocks.register("archaeopteris_leaves", LeavesBlock::new, () -> FABlocks.leavesProperties(SoundType.GRASS));
    public static final SimpleHolder<StairBlock> ARCHAEOPTERIS_STAIRS = FABlocks.registerStair("archaeopteris_stairs", FABlocks.ARCHAEOPTERIS_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> ARCHAEOPTERIS_SIGN = FABlocks.register("archaeopteris_sign", properties -> new FossilsStandingSignBlock(FAWoodTypes.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallSignBlock> ARCHAEOPTERIS_WALL_SIGN = FABlocks.registerWallSign("archaeopteris_wall_sign", FAWoodTypes.ARCHAEOPTERIS, FABlocks.ARCHAEOPTERIS_SIGN, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<DoorBlock> ARCHAEOPTERIS_DOOR = FABlocks.register("archaeopteris_door", properties -> new DoorBlock(FABlockSetTypes.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARCHAEOPTERIS_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> ARCHAEOPTERIS_HANGING_SIGN = FABlocks.register("archaeopteris_hanging_sign", properties -> new FossilsCeilingHangingSignBlock(FAWoodTypes.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARCHAEOPTERIS_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallHangingSignBlock> ARCHAEOPTERIS_WALL_HANGING_SIGN = FABlocks.registerWallHangingSign("archaeopteris_wall_hanging_sign", FAWoodTypes.ARCHAEOPTERIS, FABlocks.ARCHAEOPTERIS_HANGING_SIGN, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARCHAEOPTERIS_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<PressurePlateBlock> ARCHAEOPTERIS_PRESSURE_PLATE = FABlocks.register("archaeopteris_pressure_plate", properties -> new PressurePlateBlock(FABlockSetTypes.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARCHAEOPTERIS_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(0.5F).ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FenceBlock> ARCHAEOPTERIS_FENCE = FABlocks.register("archaeopteris_fence", FenceBlock::new, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARCHAEOPTERIS_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<TrapDoorBlock> ARCHAEOPTERIS_TRAPDOOR = FABlocks.register("archaeopteris_trapdoor", properties -> new TrapDoorBlock(FABlockSetTypes.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().isValidSpawn(SimpleUtils::never).ignitedByLava());
    public static final SimpleHolder<FenceGateBlock> ARCHAEOPTERIS_FENCE_GATE = FABlocks.register("archaeopteris_fence_gate", properties -> new FenceGateBlock(FAWoodTypes.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARCHAEOPTERIS_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).ignitedByLava());
    public static final SimpleHolder<FlowerPotBlock> POTTED_ARCHAEOPTERIS_SAPLING = FABlocks.register("potted_archaeopteris_sapling", properties -> new FlowerPotBlock(FABlocks.ARCHAEOPTERIS_SAPLING.get(), properties), FABlocks::flowerPotProperties);
    public static final SimpleHolder<ButtonBlock> ARCHAEOPTERIS_BUTTON = FABlocks.register("archaeopteris_button", properties -> new ButtonBlock(FABlockSetTypes.ARCHAEOPTERIS, 30, properties), FABlocks::buttonProperties);
    public static final SimpleHolder<SlabBlock> ARCHAEOPTERIS_SLAB = FABlocks.register("archaeopteris_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<TarBlock> TAR = FABlocks.register("tar", properties -> new TarBlock(FAFluids.TAR.get(), properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).replaceable().noCollission().strength(100.0F).pushReaction(PushReaction.DESTROY).noLootTable().liquid().sound(SoundType.EMPTY));

    public static BlockBehaviour.Properties flowerPotProperties() {
        return BlockBehaviour.Properties.of().instabreak().noOcclusion().pushReaction(PushReaction.DESTROY);
    }

    public static BlockBehaviour.Properties buttonProperties() {
        return BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY);
    }

    private static BlockBehaviour.Properties logProperties(MapColor topMapColor, MapColor sideMapColor) {
        return BlockBehaviour.Properties.of().mapColor(blockState -> blockState.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? topMapColor : sideMapColor).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava();
    }

    private static BlockBehaviour.Properties leavesProperties(SoundType soundType) {
        return BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).strength(0.2F).randomTicks().sound(soundType).noOcclusion().isValidSpawn(SimpleUtils::ocelotOrParrot).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).ignitedByLava().pushReaction(PushReaction.DESTROY).isRedstoneConductor(SimpleUtils::never);
    }

    private static SimpleHolder<StairBlock> registerStair(String name, Supplier<Block> block) {
        return FABlocks.register(name, properties -> new StairBlock(block.get().defaultBlockState(), properties), () -> BlockBehaviour.Properties.ofFullCopy(block.get()));
    }

    private static SimpleHolder<FossilsWallSignBlock> registerWallSign(String name, WoodType woodType, Supplier<? extends Block> block, Supplier<BlockBehaviour.Properties> properties) {
        return FABlocks.register(name, propertiesIn -> new FossilsWallSignBlock(woodType, propertiesIn), () -> properties.get().overrideLootTable(block.get().getLootTable()).overrideDescription(block.get().getDescriptionId()));
    }

    private static SimpleHolder<FossilsWallHangingSignBlock> registerWallHangingSign(String name, WoodType woodType, Supplier<? extends Block> block, Supplier<BlockBehaviour.Properties> properties) {
        return FABlocks.register(name, propertiesIn -> new FossilsWallHangingSignBlock(woodType, propertiesIn), () -> properties.get().overrideLootTable(block.get().getLootTable()).overrideDescription(block.get().getDescriptionId()));
    }

    private static SimpleHolder<Block> register(String name, Supplier<BlockBehaviour.Properties> properties) {
        return FABlocks.register(name, Block::new, properties);
    }

    private static <T extends Block> SimpleHolder<T> register(String name, Function<BlockBehaviour.Properties, T> block, Supplier<BlockBehaviour.Properties> properties) {
        ResourceKey<Block> id = ResourceKey.create(Registries.BLOCK, FAUtils.resource(name));
        return BLOCKS.register(name, () -> block.apply(properties.get().setId(id)));
    }
}
