package willatendo.fossilslegacy.server.block;

import net.minecraft.core.Direction;
import net.minecraft.core.registries.Registries;
import net.minecraft.resources.ResourceKey;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
import net.minecraft.world.level.block.state.properties.WoodType;
import net.minecraft.world.level.material.MapColor;
import net.minecraft.world.level.material.PushReaction;
import willatendo.fossilslegacy.server.block.blocks.SkullBlock;
import willatendo.fossilslegacy.server.block.blocks.*;
import willatendo.fossilslegacy.server.block.cauldron.FACauldronInteraction;
import willatendo.fossilslegacy.server.fluid.FAFluids;
import willatendo.fossilslegacy.server.utils.FAUtils;
import willatendo.simplelibrary.server.registry.BlockRegistry;
import willatendo.simplelibrary.server.registry.SimpleHolder;
import willatendo.simplelibrary.server.registry.SimpleRegistry;
import willatendo.simplelibrary.server.util.SimpleUtils;

import java.util.function.Function;
import java.util.function.Supplier;

public final class FABlocks {
    public static final BlockRegistry BLOCKS = SimpleRegistry.createBlock(FAUtils.ID);

    public static final SimpleHolder<Block> FOSSIL_ORE = BLOCKS.registerBlock("fossil_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(3.0F, 3.0F));
    public static final SimpleHolder<Block> DEEPSLATE_FOSSIL_ORE = BLOCKS.registerBlock("deepslate_fossil_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.DEEPSLATE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE));
    public static final SimpleHolder<SkullBlock> SKULL_BLOCK = BLOCKS.registerBlock("skull_block", SkullBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.XYLOPHONE).sound(SoundType.BONE_BLOCK).strength(1.0F));
    public static final SimpleHolder<GenericSkullBlock> SKULL_LANTERN_BLOCK = BLOCKS.registerBlock("skull_lantern_block", GenericSkullBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.XYLOPHONE).sound(SoundType.BONE_BLOCK).strength(1.0F).lightLevel(blockState -> 15));
    public static final SimpleHolder<AnalyzerBlock> ANALYZER = BLOCKS.registerBlock("analyzer", AnalyzerBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL).lightLevel(blockState -> blockState.getValue(AnalyzerBlock.ACTIVE) ? 5 : 0));
    public static final SimpleHolder<DNACoderBlock> DNA_CODER = BLOCKS.registerBlock("dna_coder", DNACoderBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL).lightLevel(blockState -> blockState.getValue(AnalyzerBlock.ACTIVE) ? 5 : 0));
    public static final SimpleHolder<DNAHybridizerBlock> DNA_HYBRIDIZER = BLOCKS.registerBlock("dna_hybridizer", DNAHybridizerBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL).noOcclusion().lightLevel(blockState -> blockState.getValue(AnalyzerBlock.ACTIVE) ? 5 : 0));
    public static final SimpleHolder<CultivatorBlock> WHITE_CULTIVATOR = BLOCKS.registerBlock("white_cultivator", properties -> new CultivatorBlock(DyeColor.WHITE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> WHITE_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("white_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.WHITE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> ORANGE_CULTIVATOR = BLOCKS.registerBlock("orange_cultivator", properties -> new CultivatorBlock(DyeColor.ORANGE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> ORANGE_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("orange_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.ORANGE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> MAGENTA_CULTIVATOR = BLOCKS.registerBlock("magenta_cultivator", properties -> new CultivatorBlock(DyeColor.MAGENTA, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> MAGENTA_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("magenta_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.MAGENTA, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> LIGHT_BLUE_CULTIVATOR = BLOCKS.registerBlock("light_blue_cultivator", properties -> new CultivatorBlock(DyeColor.LIGHT_BLUE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> LIGHT_BLUE_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("light_blue_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.LIGHT_BLUE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> YELLOW_CULTIVATOR = BLOCKS.registerBlock("yellow_cultivator", properties -> new CultivatorBlock(DyeColor.YELLOW, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> YELLOW_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("yellow_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.YELLOW, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> LIME_CULTIVATOR = BLOCKS.registerBlock("lime_cultivator", properties -> new CultivatorBlock(DyeColor.LIME, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> LIME_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("lime_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.LIME, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> PINK_CULTIVATOR = BLOCKS.registerBlock("pink_cultivator", properties -> new CultivatorBlock(DyeColor.PINK, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> PINK_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("pink_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.PINK, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> GRAY_CULTIVATOR = BLOCKS.registerBlock("gray_cultivator", properties -> new CultivatorBlock(DyeColor.GRAY, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> GRAY_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("gray_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.GRAY, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> LIGHT_GRAY_CULTIVATOR = BLOCKS.registerBlock("light_gray_cultivator", properties -> new CultivatorBlock(DyeColor.LIGHT_GRAY, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> LIGHT_GRAY_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("light_gray_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.LIGHT_GRAY, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> CYAN_CULTIVATOR = BLOCKS.registerBlock("cyan_cultivator", properties -> new CultivatorBlock(DyeColor.CYAN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> CYAN_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("cyan_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.CYAN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> PURPLE_CULTIVATOR = BLOCKS.registerBlock("purple_cultivator", properties -> new CultivatorBlock(DyeColor.PURPLE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> PURPLE_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("purple_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.PURPLE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> BLUE_CULTIVATOR = BLOCKS.registerBlock("blue_cultivator", properties -> new CultivatorBlock(DyeColor.BLUE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> BLUE_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("blue_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.BLUE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> BROWN_CULTIVATOR = BLOCKS.registerBlock("brown_cultivator", properties -> new CultivatorBlock(DyeColor.BROWN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> BROWN_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("brown_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.BROWN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> GREEN_CULTIVATOR = BLOCKS.registerBlock("green_cultivator", properties -> new CultivatorBlock(DyeColor.GREEN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> GREEN_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("green_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.GREEN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> RED_CULTIVATOR = BLOCKS.registerBlock("red_cultivator", properties -> new CultivatorBlock(DyeColor.RED, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> RED_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("red_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.RED, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<CultivatorBlock> BLACK_CULTIVATOR = BLOCKS.registerBlock("black_cultivator", properties -> new CultivatorBlock(DyeColor.BLACK, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> BLACK_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("black_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.BLACK, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(SimpleUtils::never).isRedstoneConductor(SimpleUtils::never).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never));
    public static final SimpleHolder<ArchaeologyWorkbenchBlock> ARCHAEOLOGY_WORKBENCH = BLOCKS.registerBlock("archaeology_workbench", ArchaeologyWorkbenchBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD));
    public static final SimpleHolder<PalaeontologyTableBlock> PALAEONTOLOGY_TABLE = BLOCKS.registerBlock("palaeontology_table", PalaeontologyTableBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD));
    public static final SimpleHolder<DNARecombinatorBlock> DNA_RECOMBINATOR = BLOCKS.registerBlock("dna_recombinator", DNARecombinatorBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL));
    public static final SimpleHolder<JurassicFernBlock> JURASSIC_FERN = BLOCKS.registerBlock("jurassic_fern", JurassicFernBlock::new, () -> BlockBehaviour.Properties.of().noCollission().instabreak().randomTicks().sound(SoundType.GRASS));
    public static final SimpleHolder<HorsetailBlock> SHORT_HORSETAIL = BLOCKS.registerBlock("short_horsetail", HorsetailBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ).ignitedByLava());
    public static final SimpleHolder<TallHorsetailBlock> TALL_HORSETAIL = BLOCKS.registerBlock("tall_horsetail", TallHorsetailBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ).ignitedByLava());
    public static final SimpleHolder<DrumBlock> DRUM = BLOCKS.registerBlock("drum", DrumBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD));
    public static final SimpleHolder<FeederBlock> FEEDER = BLOCKS.registerBlock("feeder", FeederBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL));
    public static final SimpleHolder<PermafrostBlock> PERMAFROST = BLOCKS.registerBlock("permafrost", PermafrostBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.CHIME).strength(0.5F).randomTicks().noOcclusion().sound(SoundType.GRAVEL));
    public static final SimpleHolder<IcedStoneBlock> ICED_STONE = BLOCKS.registerBlock("iced_stone", IcedStoneBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.CHIME).requiresCorrectToolForDrops().strength(1.5F, 6.0F).randomTicks().noOcclusion());
    public static final SimpleHolder<AxolotlspawnBlock> AXOLOTLSPAWN = BLOCKS.registerBlock("axolotlspawn", AxolotlspawnBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.WATER).instabreak().noOcclusion().noCollission().sound(SoundType.FROGSPAWN).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<TimeMachineBlock> TIME_MACHINE = BLOCKS.registerBlock("time_machine", TimeMachineBlock::new, () -> BlockBehaviour.Properties.of().strength(0.3F).lightLevel(blockState -> 14).sound(SoundType.GLASS));
    public static final SimpleHolder<RawSoupCauldronBlock> RAW_CHICKEN_SOUP_CAULDRON = BLOCKS.registerBlock("raw_chicken_soup_cauldron", properties -> new RawSoupCauldronBlock(FACauldronInteraction.RAW_CHICKEN_SOUP, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CAULDRON));
    public static final SimpleHolder<SoupCauldronBlock> COOKED_CHICKEN_SOUP_CAULDRON = BLOCKS.registerBlock("cooked_chicken_soup_cauldron", properties -> new SoupCauldronBlock(FACauldronInteraction.COOKED_CHICKEN_SOUP, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CAULDRON));
    public static final SimpleHolder<RawSoupCauldronBlock> RAW_BERRY_MEDLEY_CAULDRON = BLOCKS.registerBlock("raw_berry_medley_cauldron", properties -> new RawSoupCauldronBlock(FACauldronInteraction.RAW_BERRY_MEDLEY, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CAULDRON));
    public static final SimpleHolder<SoupCauldronBlock> COOKED_BERRY_MEDLEY_CAULDRON = BLOCKS.registerBlock("cooked_berry_medley_cauldron", properties -> new SoupCauldronBlock(FACauldronInteraction.COOKED_BERRY_MEDLEY, properties), () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CAULDRON));
    public static final SimpleHolder<MayanVaseBlock> MAYAN_VASE = BLOCKS.registerBlock("mayan_vase", MayanVaseBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).strength(0.0F, 0.0F).pushReaction(PushReaction.DESTROY).noOcclusion());
    public static final SimpleHolder<MayanVaseBlock> MAYAN_JADE_VASE = BLOCKS.registerBlock("mayan_jade_vase", MayanVaseBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).strength(0.0F, 0.0F).pushReaction(PushReaction.DESTROY).noOcclusion());
    public static final SimpleHolder<MayanVaseBlock> MAYAN_OCELOT_VASE = BLOCKS.registerBlock("mayan_ocelot_vase", MayanVaseBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).strength(0.0F, 0.0F).pushReaction(PushReaction.DESTROY).noOcclusion());
    public static final SimpleHolder<MayanVaseBlock> MAYAN_VILLAGER_VASE = BLOCKS.registerBlock("mayan_villager_vase", MayanVaseBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).strength(0.0F, 0.0F).pushReaction(PushReaction.DESTROY).noOcclusion());
    public static final SimpleHolder<LlamaStatueBlock> IRON_LLAMA_STATUE = BLOCKS.registerBlock("iron_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<WeatheringCopperLlamaStatueBlock> COPPER_LLAMA_STATUE = BLOCKS.registerBlock("copper_llama_statue", properties -> new WeatheringCopperLlamaStatueBlock(WeatheringCopper.WeatherState.UNAFFECTED, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<WeatheringCopperLlamaStatueBlock> EXPOSED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("exposed_copper_llama_statue", properties -> new WeatheringCopperLlamaStatueBlock(WeatheringCopper.WeatherState.EXPOSED, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<WeatheringCopperLlamaStatueBlock> WEATHERED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("weathered_copper_llama_statue", properties -> new WeatheringCopperLlamaStatueBlock(WeatheringCopper.WeatherState.WEATHERED, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<WeatheringCopperLlamaStatueBlock> OXIDIZED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("oxidized_copper_llama_statue", properties -> new WeatheringCopperLlamaStatueBlock(WeatheringCopper.WeatherState.OXIDIZED, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<LlamaStatueBlock> WAXED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("waxed_copper_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<LlamaStatueBlock> WAXED_EXPOSED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("waxed_exposed_copper_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<LlamaStatueBlock> WAXED_WEATHERED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("waxed_weathered_copper_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<LlamaStatueBlock> WAXED_OXIDIZED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("waxed_oxidized_copper_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<DecorationPostBlock> WHITE_DECORATION_POST = BLOCKS.registerBlock("white_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.WHITE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> ORANGE_DECORATION_POST = BLOCKS.registerBlock("orange_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.ORANGE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> MAGENTA_DECORATION_POST = BLOCKS.registerBlock("magenta_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.MAGENTA_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> LIGHT_BLUE_DECORATION_POST = BLOCKS.registerBlock("light_blue_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.LIGHT_BLUE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> YELLOW_DECORATION_POST = BLOCKS.registerBlock("yellow_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.YELLOW_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> LIME_DECORATION_POST = BLOCKS.registerBlock("lime_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.LIME_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> PINK_DECORATION_POST = BLOCKS.registerBlock("pink_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.PINK_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> GRAY_DECORATION_POST = BLOCKS.registerBlock("gray_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.GRAY_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> LIGHT_GRAY_DECORATION_POST = BLOCKS.registerBlock("light_gray_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.LIGHT_GRAY_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> CYAN_DECORATION_POST = BLOCKS.registerBlock("cyan_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CYAN_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> PURPLE_DECORATION_POST = BLOCKS.registerBlock("purple_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.PURPLE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> BLUE_DECORATION_POST = BLOCKS.registerBlock("blue_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.BLUE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> BROWN_DECORATION_POST = BLOCKS.registerBlock("brown_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.BROWN_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> GREEN_DECORATION_POST = BLOCKS.registerBlock("green_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.GREEN_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> RED_DECORATION_POST = BLOCKS.registerBlock("red_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.RED_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> BLACK_DECORATION_POST = BLOCKS.registerBlock("black_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.BLACK_CONCRETE));
    public static final SimpleHolder<SmallCageBlock> SMALL_CAGE = BLOCKS.registerBlock("small_cage", SmallCageBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.5F, 6.0F).noOcclusion());
    public static final SimpleHolder<MediumCageBlock> MEDIUM_CAGE = BLOCKS.registerBlock("medium_cage", MediumCageBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.5F, 6.0F).noOcclusion());
    public static final SimpleHolder<CycadHeadBlock> CYCAD_HEAD = BLOCKS.registerBlock("cycad_head", CycadHeadBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava().noOcclusion().randomTicks());
    public static final SimpleHolder<CycadLogBlock> CYCAD_LOG = BLOCKS.registerBlock("cycad_log", CycadLogBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<Block> LEPIDODENDRON_PLANKS = BLOCKS.registerBlock("lepidodendron_planks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<SaplingBlock> LEPIDODENDRON_SAPLING = BLOCKS.registerBlock("lepidodendron_sapling", properties -> new SaplingBlock(FATreeGrowers.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<RotatedPillarBlock> LEPIDODENDRON_LOG = BLOCKS.registerBlock("lepidodendron_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_GREEN, MapColor.TERRACOTTA_BROWN));
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_LEPIDODENDRON_LOG = BLOCKS.registerBlock("stripped_lepidodendron_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_GREEN, MapColor.TERRACOTTA_GREEN));
    public static final SimpleHolder<RotatedPillarBlock> LEPIDODENDRON_WOOD = BLOCKS.registerBlock("lepidodendron_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_LEPIDODENDRON_WOOD = BLOCKS.registerBlock("stripped_lepidodendron_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<LeavesBlock> LEPIDODENDRON_LEAVES = BLOCKS.registerBlock("lepidodendron_leaves", LeavesBlock::new, () -> FABlocks.leavesProperties(SoundType.GRASS));
    public static final SimpleHolder<StairBlock> LEPIDODENDRON_STAIRS = FABlocks.registerStair("lepidodendron_stairs", FABlocks.LEPIDODENDRON_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> LEPIDODENDRON_SIGN = BLOCKS.registerBlock("lepidodendron_sign", properties -> new FossilsStandingSignBlock(FAWoodTypes.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallSignBlock> LEPIDODENDRON_WALL_SIGN = FABlocks.registerWallSign("lepidodendron_wall_sign", FAWoodTypes.LEPIDODENDRON, FABlocks.LEPIDODENDRON_SIGN, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<DoorBlock> LEPIDODENDRON_DOOR = BLOCKS.registerBlock("lepidodendron_door", properties -> new DoorBlock(FABlockSetTypes.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.LEPIDODENDRON_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> LEPIDODENDRON_HANGING_SIGN = BLOCKS.registerBlock("lepidodendron_hanging_sign", properties -> new FossilsCeilingHangingSignBlock(FAWoodTypes.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.LEPIDODENDRON_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallHangingSignBlock> LEPIDODENDRON_WALL_HANGING_SIGN = FABlocks.registerWallHangingSign("lepidodendron_wall_hanging_sign", FAWoodTypes.LEPIDODENDRON, FABlocks.LEPIDODENDRON_HANGING_SIGN, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.LEPIDODENDRON_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<PressurePlateBlock> LEPIDODENDRON_PRESSURE_PLATE = BLOCKS.registerBlock("lepidodendron_pressure_plate", properties -> new PressurePlateBlock(FABlockSetTypes.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.LEPIDODENDRON_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(0.5F).ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FenceBlock> LEPIDODENDRON_FENCE = BLOCKS.registerBlock("lepidodendron_fence", FenceBlock::new, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.LEPIDODENDRON_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<TrapDoorBlock> LEPIDODENDRON_TRAPDOOR = BLOCKS.registerBlock("lepidodendron_trapdoor", properties -> new TrapDoorBlock(FABlockSetTypes.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().isValidSpawn(SimpleUtils::never).ignitedByLava());
    public static final SimpleHolder<FenceGateBlock> LEPIDODENDRON_FENCE_GATE = BLOCKS.registerBlock("lepidodendron_fence_gate", properties -> new FenceGateBlock(FAWoodTypes.LEPIDODENDRON, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.LEPIDODENDRON_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).ignitedByLava());
    public static final SimpleHolder<FlowerPotBlock> POTTED_LEPIDODENDRON_SAPLING = BLOCKS.registerBlock("potted_lepidodendron_sapling", properties -> new FlowerPotBlock(FABlocks.LEPIDODENDRON_SAPLING.get(), properties), FABlocks::flowerPotProperties);
    public static final SimpleHolder<ButtonBlock> LEPIDODENDRON_BUTTON = BLOCKS.registerBlock("lepidodendron_button", properties -> new ButtonBlock(FABlockSetTypes.LEPIDODENDRON, 30, properties), FABlocks::buttonProperties);
    public static final SimpleHolder<SlabBlock> LEPIDODENDRON_SLAB = BLOCKS.registerBlock("lepidodendron_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<Block> SIGILLARIA_PLANKS = BLOCKS.registerBlock("sigillaria_planks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<SaplingBlock> SIGILLARIA_SAPLING = BLOCKS.registerBlock("sigillaria_sapling", properties -> new SaplingBlock(FATreeGrowers.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<RotatedPillarBlock> SIGILLARIA_LOG = BLOCKS.registerBlock("sigillaria_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_BLACK, MapColor.TERRACOTTA_GRAY));
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_SIGILLARIA_LOG = BLOCKS.registerBlock("stripped_sigillaria_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_BLACK, MapColor.TERRACOTTA_BLACK));
    public static final SimpleHolder<RotatedPillarBlock> SIGILLARIA_WOOD = BLOCKS.registerBlock("sigillaria_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GRAY).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_SIGILLARIA_WOOD = BLOCKS.registerBlock("stripped_sigillaria_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<LeavesBlock> SIGILLARIA_LEAVES = BLOCKS.registerBlock("sigillaria_leaves", LeavesBlock::new, () -> FABlocks.leavesProperties(SoundType.GRASS));
    public static final SimpleHolder<StairBlock> SIGILLARIA_STAIRS = FABlocks.registerStair("sigillaria_stairs", FABlocks.SIGILLARIA_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> SIGILLARIA_SIGN = BLOCKS.registerBlock("sigillaria_sign", properties -> new FossilsStandingSignBlock(FAWoodTypes.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallSignBlock> SIGILLARIA_WALL_SIGN = FABlocks.registerWallSign("sigillaria_wall_sign", FAWoodTypes.SIGILLARIA, FABlocks.SIGILLARIA_SIGN, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<DoorBlock> SIGILLARIA_DOOR = BLOCKS.registerBlock("sigillaria_door", properties -> new DoorBlock(FABlockSetTypes.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.SIGILLARIA_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> SIGILLARIA_HANGING_SIGN = BLOCKS.registerBlock("sigillaria_hanging_sign", properties -> new FossilsCeilingHangingSignBlock(FAWoodTypes.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.SIGILLARIA_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallHangingSignBlock> SIGILLARIA_WALL_HANGING_SIGN = FABlocks.registerWallHangingSign("sigillaria_wall_hanging_sign", FAWoodTypes.SIGILLARIA, FABlocks.SIGILLARIA_HANGING_SIGN, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.SIGILLARIA_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<PressurePlateBlock> SIGILLARIA_PRESSURE_PLATE = BLOCKS.registerBlock("sigillaria_pressure_plate", properties -> new PressurePlateBlock(FABlockSetTypes.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.SIGILLARIA_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(0.5F).ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FenceBlock> SIGILLARIA_FENCE = BLOCKS.registerBlock("sigillaria_fence", FenceBlock::new, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.SIGILLARIA_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<TrapDoorBlock> SIGILLARIA_TRAPDOOR = BLOCKS.registerBlock("sigillaria_trapdoor", properties -> new TrapDoorBlock(FABlockSetTypes.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().isValidSpawn(SimpleUtils::never).ignitedByLava());
    public static final SimpleHolder<FenceGateBlock> SIGILLARIA_FENCE_GATE = BLOCKS.registerBlock("sigillaria_fence_gate", properties -> new FenceGateBlock(FAWoodTypes.SIGILLARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.SIGILLARIA_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).ignitedByLava());
    public static final SimpleHolder<FlowerPotBlock> POTTED_SIGILLARIA_SAPLING = BLOCKS.registerBlock("potted_sigillaria_sapling", properties -> new FlowerPotBlock(FABlocks.SIGILLARIA_SAPLING.get(), properties), FABlocks::flowerPotProperties);
    public static final SimpleHolder<ButtonBlock> SIGILLARIA_BUTTON = BLOCKS.registerBlock("sigillaria_button", properties -> new ButtonBlock(FABlockSetTypes.SIGILLARIA, 30, properties), FABlocks::buttonProperties);
    public static final SimpleHolder<SlabBlock> SIGILLARIA_SLAB = BLOCKS.registerBlock("sigillaria_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<Block> CALAMITES_PLANKS = BLOCKS.registerBlock("calamites_planks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<SaplingBlock> CALAMITES_SAPLING = BLOCKS.registerBlock("calamites_sapling", properties -> new SaplingBlock(FATreeGrowers.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<RotatedPillarBlock> CALAMITES_LOG = BLOCKS.registerBlock("calamites_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_BROWN, MapColor.TERRACOTTA_GREEN));
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_CALAMITES_LOG = BLOCKS.registerBlock("stripped_calamites_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_BROWN, MapColor.TERRACOTTA_BROWN));
    public static final SimpleHolder<RotatedPillarBlock> CALAMITES_WOOD = BLOCKS.registerBlock("calamites_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GREEN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_CALAMITES_WOOD = BLOCKS.registerBlock("stripped_calamites_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<LeavesBlock> CALAMITES_LEAVES = BLOCKS.registerBlock("calamites_leaves", LeavesBlock::new, () -> FABlocks.leavesProperties(SoundType.GRASS));
    public static final SimpleHolder<StairBlock> CALAMITES_STAIRS = FABlocks.registerStair("calamites_stairs", FABlocks.CALAMITES_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> CALAMITES_SIGN = BLOCKS.registerBlock("calamites_sign", properties -> new FossilsStandingSignBlock(FAWoodTypes.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallSignBlock> CALAMITES_WALL_SIGN = FABlocks.registerWallSign("calamites_wall_sign", FAWoodTypes.CALAMITES, FABlocks.CALAMITES_SIGN, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<DoorBlock> CALAMITES_DOOR = BLOCKS.registerBlock("calamites_door", properties -> new DoorBlock(FABlockSetTypes.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.CALAMITES_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> CALAMITES_HANGING_SIGN = BLOCKS.registerBlock("calamites_hanging_sign", properties -> new FossilsCeilingHangingSignBlock(FAWoodTypes.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.CALAMITES_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallHangingSignBlock> CALAMITES_WALL_HANGING_SIGN = FABlocks.registerWallHangingSign("calamites_wall_hanging_sign", FAWoodTypes.CALAMITES, FABlocks.CALAMITES_HANGING_SIGN, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.CALAMITES_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<PressurePlateBlock> CALAMITES_PRESSURE_PLATE = BLOCKS.registerBlock("calamites_pressure_plate", properties -> new PressurePlateBlock(FABlockSetTypes.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.CALAMITES_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(0.5F).ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FenceBlock> CALAMITES_FENCE = BLOCKS.registerBlock("calamites_fence", FenceBlock::new, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.CALAMITES_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<TrapDoorBlock> CALAMITES_TRAPDOOR = BLOCKS.registerBlock("calamites_trapdoor", properties -> new TrapDoorBlock(FABlockSetTypes.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().isValidSpawn(SimpleUtils::never).ignitedByLava());
    public static final SimpleHolder<FenceGateBlock> CALAMITES_FENCE_GATE = BLOCKS.registerBlock("calamites_fence_gate", properties -> new FenceGateBlock(FAWoodTypes.CALAMITES, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.CALAMITES_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).ignitedByLava());
    public static final SimpleHolder<FlowerPotBlock> POTTED_CALAMITES_SAPLING = BLOCKS.registerBlock("potted_calamites_sapling", properties -> new FlowerPotBlock(FABlocks.CALAMITES_SAPLING.get(), properties), FABlocks::flowerPotProperties);
    public static final SimpleHolder<ButtonBlock> CALAMITES_BUTTON = BLOCKS.registerBlock("calamites_button", properties -> new ButtonBlock(FABlockSetTypes.CALAMITES, 30, properties), FABlocks::buttonProperties);
    public static final SimpleHolder<SlabBlock> CALAMITES_SLAB = BLOCKS.registerBlock("calamites_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<Block> ARCHAEOPTERIS_PLANKS = BLOCKS.registerBlock("archaeopteris_planks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<SaplingBlock> ARCHAEOPTERIS_SAPLING = BLOCKS.registerBlock("archaeopteris_sapling", properties -> new SaplingBlock(FATreeGrowers.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<RotatedPillarBlock> ARCHAEOPTERIS_LOG = BLOCKS.registerBlock("archaeopteris_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_YELLOW, MapColor.TERRACOTTA_BROWN));
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_ARCHAEOPTERIS_LOG = BLOCKS.registerBlock("stripped_archaeopteris_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_BROWN, MapColor.TERRACOTTA_BROWN));
    public static final SimpleHolder<RotatedPillarBlock> ARCHAEOPTERIS_WOOD = BLOCKS.registerBlock("archaeopteris_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_ARCHAEOPTERIS_WOOD = BLOCKS.registerBlock("stripped_archaeopteris_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<LeavesBlock> ARCHAEOPTERIS_LEAVES = BLOCKS.registerBlock("archaeopteris_leaves", LeavesBlock::new, () -> FABlocks.leavesProperties(SoundType.GRASS));
    public static final SimpleHolder<StairBlock> ARCHAEOPTERIS_STAIRS = FABlocks.registerStair("archaeopteris_stairs", FABlocks.ARCHAEOPTERIS_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> ARCHAEOPTERIS_SIGN = BLOCKS.registerBlock("archaeopteris_sign", properties -> new FossilsStandingSignBlock(FAWoodTypes.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallSignBlock> ARCHAEOPTERIS_WALL_SIGN = FABlocks.registerWallSign("archaeopteris_wall_sign", FAWoodTypes.ARCHAEOPTERIS, FABlocks.ARCHAEOPTERIS_SIGN, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<DoorBlock> ARCHAEOPTERIS_DOOR = BLOCKS.registerBlock("archaeopteris_door", properties -> new DoorBlock(FABlockSetTypes.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARCHAEOPTERIS_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> ARCHAEOPTERIS_HANGING_SIGN = BLOCKS.registerBlock("archaeopteris_hanging_sign", properties -> new FossilsCeilingHangingSignBlock(FAWoodTypes.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARCHAEOPTERIS_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallHangingSignBlock> ARCHAEOPTERIS_WALL_HANGING_SIGN = FABlocks.registerWallHangingSign("archaeopteris_wall_hanging_sign", FAWoodTypes.ARCHAEOPTERIS, FABlocks.ARCHAEOPTERIS_HANGING_SIGN, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARCHAEOPTERIS_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<PressurePlateBlock> ARCHAEOPTERIS_PRESSURE_PLATE = BLOCKS.registerBlock("archaeopteris_pressure_plate", properties -> new PressurePlateBlock(FABlockSetTypes.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARCHAEOPTERIS_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(0.5F).ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FenceBlock> ARCHAEOPTERIS_FENCE = BLOCKS.registerBlock("archaeopteris_fence", FenceBlock::new, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARCHAEOPTERIS_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<TrapDoorBlock> ARCHAEOPTERIS_TRAPDOOR = BLOCKS.registerBlock("archaeopteris_trapdoor", properties -> new TrapDoorBlock(FABlockSetTypes.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().isValidSpawn(SimpleUtils::never).ignitedByLava());
    public static final SimpleHolder<FenceGateBlock> ARCHAEOPTERIS_FENCE_GATE = BLOCKS.registerBlock("archaeopteris_fence_gate", properties -> new FenceGateBlock(FAWoodTypes.ARCHAEOPTERIS, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARCHAEOPTERIS_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).ignitedByLava());
    public static final SimpleHolder<FlowerPotBlock> POTTED_ARCHAEOPTERIS_SAPLING = BLOCKS.registerBlock("potted_archaeopteris_sapling", properties -> new FlowerPotBlock(FABlocks.ARCHAEOPTERIS_SAPLING.get(), properties), FABlocks::flowerPotProperties);
    public static final SimpleHolder<ButtonBlock> ARCHAEOPTERIS_BUTTON = BLOCKS.registerBlock("archaeopteris_button", properties -> new ButtonBlock(FABlockSetTypes.ARCHAEOPTERIS, 30, properties), FABlocks::buttonProperties);
    public static final SimpleHolder<SlabBlock> ARCHAEOPTERIS_SLAB = BLOCKS.registerBlock("archaeopteris_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<Block> GINKGO_PLANKS = BLOCKS.registerBlock("ginkgo_planks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<SaplingBlock> GINKGO_SAPLING = BLOCKS.registerBlock("ginkgo_sapling", properties -> new SaplingBlock(FATreeGrowers.GINKGO, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<RotatedPillarBlock> GINKGO_LOG = BLOCKS.registerBlock("ginkgo_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_ORANGE, MapColor.TERRACOTTA_BROWN));
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_GINKGO_LOG = BLOCKS.registerBlock("stripped_ginkgo_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_BROWN, MapColor.TERRACOTTA_BROWN));
    public static final SimpleHolder<RotatedPillarBlock> GINKGO_WOOD = BLOCKS.registerBlock("ginkgo_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_GINKGO_WOOD = BLOCKS.registerBlock("stripped_ginkgo_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<LeavesBlock> GINKGO_LEAVES = BLOCKS.registerBlock("ginkgo_leaves", LeavesBlock::new, () -> FABlocks.leavesProperties(SoundType.GRASS));
    public static final SimpleHolder<StairBlock> GINKGO_STAIRS = FABlocks.registerStair("ginkgo_stairs", FABlocks.GINKGO_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> GINKGO_SIGN = BLOCKS.registerBlock("ginkgo_sign", properties -> new FossilsStandingSignBlock(FAWoodTypes.GINKGO, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallSignBlock> GINKGO_WALL_SIGN = FABlocks.registerWallSign("ginkgo_wall_sign", FAWoodTypes.GINKGO, FABlocks.GINKGO_SIGN, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<DoorBlock> GINKGO_DOOR = BLOCKS.registerBlock("ginkgo_door", properties -> new DoorBlock(FABlockSetTypes.GINKGO, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.GINKGO_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> GINKGO_HANGING_SIGN = BLOCKS.registerBlock("ginkgo_hanging_sign", properties -> new FossilsCeilingHangingSignBlock(FAWoodTypes.GINKGO, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.GINKGO_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallHangingSignBlock> GINKGO_WALL_HANGING_SIGN = FABlocks.registerWallHangingSign("ginkgo_wall_hanging_sign", FAWoodTypes.GINKGO, FABlocks.GINKGO_HANGING_SIGN, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.GINKGO_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<PressurePlateBlock> GINKGO_PRESSURE_PLATE = BLOCKS.registerBlock("ginkgo_pressure_plate", properties -> new PressurePlateBlock(FABlockSetTypes.GINKGO, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.GINKGO_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(0.5F).ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FenceBlock> GINKGO_FENCE = BLOCKS.registerBlock("ginkgo_fence", FenceBlock::new, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.GINKGO_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<TrapDoorBlock> GINKGO_TRAPDOOR = BLOCKS.registerBlock("ginkgo_trapdoor", properties -> new TrapDoorBlock(FABlockSetTypes.GINKGO, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().isValidSpawn(SimpleUtils::never).ignitedByLava());
    public static final SimpleHolder<FenceGateBlock> GINKGO_FENCE_GATE = BLOCKS.registerBlock("ginkgo_fence_gate", properties -> new FenceGateBlock(FAWoodTypes.GINKGO, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.GINKGO_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).ignitedByLava());
    public static final SimpleHolder<FlowerPotBlock> POTTED_GINKGO_SAPLING = BLOCKS.registerBlock("potted_ginkgo_sapling", properties -> new FlowerPotBlock(FABlocks.GINKGO_SAPLING.get(), properties), FABlocks::flowerPotProperties);
    public static final SimpleHolder<ButtonBlock> GINKGO_BUTTON = BLOCKS.registerBlock("ginkgo_button", properties -> new ButtonBlock(FABlockSetTypes.GINKGO, 30, properties), FABlocks::buttonProperties);
    public static final SimpleHolder<SlabBlock> GINKGO_SLAB = BLOCKS.registerBlock("ginkgo_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<Block> ARAUCARIA_PLANKS = BLOCKS.registerBlock("araucaria_planks", () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_LIGHT_BLUE).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<SaplingBlock> ARAUCARIA_SAPLING = BLOCKS.registerBlock("araucaria_sapling", properties -> new SaplingBlock(FATreeGrowers.ARAUCARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<RotatedPillarBlock> ARAUCARIA_LOG = BLOCKS.registerBlock("araucaria_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_LIGHT_BLUE, MapColor.TERRACOTTA_BROWN));
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_ARAUCARIA_LOG = BLOCKS.registerBlock("stripped_araucaria_log", RotatedPillarBlock::new, () -> FABlocks.logProperties(MapColor.TERRACOTTA_BROWN, MapColor.TERRACOTTA_BROWN));
    public static final SimpleHolder<RotatedPillarBlock> ARAUCARIA_WOOD = BLOCKS.registerBlock("araucaria_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_LIGHT_BLUE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_ARAUCARIA_WOOD = BLOCKS.registerBlock("stripped_araucaria_wood", RotatedPillarBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<LeavesBlock> ARAUCARIA_LEAVES = BLOCKS.registerBlock("araucaria_leaves", LeavesBlock::new, () -> FABlocks.leavesProperties(SoundType.GRASS));
    public static final SimpleHolder<StairBlock> ARAUCARIA_STAIRS = FABlocks.registerStair("araucaria_stairs", FABlocks.ARAUCARIA_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> ARAUCARIA_SIGN = BLOCKS.registerBlock("araucaria_sign", properties -> new FossilsStandingSignBlock(FAWoodTypes.ARAUCARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_LIGHT_BLUE).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallSignBlock> ARAUCARIA_WALL_SIGN = FABlocks.registerWallSign("araucaria_wall_sign", FAWoodTypes.ARAUCARIA, FABlocks.ARAUCARIA_SIGN, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_LIGHT_BLUE).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<DoorBlock> ARAUCARIA_DOOR = BLOCKS.registerBlock("araucaria_door", properties -> new DoorBlock(FABlockSetTypes.ARAUCARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARAUCARIA_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> ARAUCARIA_HANGING_SIGN = BLOCKS.registerBlock("araucaria_hanging_sign", properties -> new FossilsCeilingHangingSignBlock(FAWoodTypes.ARAUCARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARAUCARIA_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<FossilsWallHangingSignBlock> ARAUCARIA_WALL_HANGING_SIGN = FABlocks.registerWallHangingSign("araucaria_wall_hanging_sign", FAWoodTypes.ARAUCARIA, FABlocks.ARAUCARIA_HANGING_SIGN, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARAUCARIA_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava());
    public static final SimpleHolder<PressurePlateBlock> ARAUCARIA_PRESSURE_PLATE = BLOCKS.registerBlock("araucaria_pressure_plate", properties -> new PressurePlateBlock(FABlockSetTypes.ARAUCARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARAUCARIA_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(0.5F).ignitedByLava().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<FenceBlock> ARAUCARIA_FENCE = BLOCKS.registerBlock("araucaria_fence", FenceBlock::new, () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARAUCARIA_PLANKS.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<TrapDoorBlock> ARAUCARIA_TRAPDOOR = BLOCKS.registerBlock("araucaria_trapdoor", properties -> new TrapDoorBlock(FABlockSetTypes.ARAUCARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_LIGHT_BLUE).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().isValidSpawn(SimpleUtils::never).ignitedByLava());
    public static final SimpleHolder<FenceGateBlock> ARAUCARIA_FENCE_GATE = BLOCKS.registerBlock("araucaria_fence_gate", properties -> new FenceGateBlock(FAWoodTypes.ARAUCARIA, properties), () -> BlockBehaviour.Properties.of().mapColor(FABlocks.ARAUCARIA_LOG.get().defaultMapColor()).forceSolidOn().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).ignitedByLava());
    public static final SimpleHolder<FlowerPotBlock> POTTED_ARAUCARIA_SAPLING = BLOCKS.registerBlock("potted_araucaria_sapling", properties -> new FlowerPotBlock(FABlocks.ARAUCARIA_SAPLING.get(), properties), FABlocks::flowerPotProperties);
    public static final SimpleHolder<ButtonBlock> ARAUCARIA_BUTTON = BLOCKS.registerBlock("araucaria_button", properties -> new ButtonBlock(FABlockSetTypes.ARAUCARIA, 30, properties), FABlocks::buttonProperties);
    public static final SimpleHolder<SlabBlock> ARAUCARIA_SLAB = BLOCKS.registerBlock("araucaria_slab", SlabBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<TarBlock> TAR = BLOCKS.registerBlock("tar", properties -> new TarBlock(FAFluids.TAR.get(), properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).replaceable().noCollission().strength(100.0F).pushReaction(PushReaction.DESTROY).noLootTable().liquid().sound(SoundType.EMPTY));

    public static BlockBehaviour.Properties flowerPotProperties() {
        return BlockBehaviour.Properties.of().instabreak().noOcclusion().pushReaction(PushReaction.DESTROY);
    }

    public static BlockBehaviour.Properties buttonProperties() {
        return BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY);
    }

    private static BlockBehaviour.Properties logProperties(MapColor topMapColor, MapColor sideMapColor) {
        return BlockBehaviour.Properties.of().mapColor(blockState -> blockState.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? topMapColor : sideMapColor).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava();
    }

    private static BlockBehaviour.Properties leavesProperties(SoundType soundType) {
        return BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).strength(0.2F).randomTicks().sound(soundType).noOcclusion().isValidSpawn(SimpleUtils::ocelotOrParrot).isSuffocating(SimpleUtils::never).isViewBlocking(SimpleUtils::never).ignitedByLava().pushReaction(PushReaction.DESTROY).isRedstoneConductor(SimpleUtils::never);
    }

    private static SimpleHolder<StairBlock> registerStair(String name, Supplier<Block> block) {
        return BLOCKS.registerBlock(name, properties -> new StairBlock(block.get().defaultBlockState(), properties), () -> BlockBehaviour.Properties.ofFullCopy(block.get()));
    }

    private static SimpleHolder<FossilsWallSignBlock> registerWallSign(String name, WoodType woodType, Supplier<? extends Block> block, Supplier<BlockBehaviour.Properties> properties) {
        return BLOCKS.registerBlock(name, propertiesIn -> new FossilsWallSignBlock(woodType, propertiesIn), () -> properties.get().overrideLootTable(block.get().getLootTable()).overrideDescription(block.get().getDescriptionId()));
    }

    private static SimpleHolder<FossilsWallHangingSignBlock> registerWallHangingSign(String name, WoodType woodType, Supplier<? extends Block> block, Supplier<BlockBehaviour.Properties> properties) {
        return BLOCKS.registerBlock(name, propertiesIn -> new FossilsWallHangingSignBlock(woodType, propertiesIn), () -> properties.get().overrideLootTable(block.get().getLootTable()).overrideDescription(block.get().getDescriptionId()));
    }

    private static <T extends Block> SimpleHolder<T> register(String name, Function<BlockBehaviour.Properties, T> block, Supplier<BlockBehaviour.Properties> properties) {
        ResourceKey<Block> id = ResourceKey.create(Registries.BLOCK, FAUtils.resource(name));
        return BLOCKS.register(name, () -> block.apply(properties.get().setId(id)));
    }
}
