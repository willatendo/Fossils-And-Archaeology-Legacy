package willatendo.fossilslegacy.server.block;

import net.minecraft.core.Direction;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
import net.minecraft.world.level.block.state.properties.WoodType;
import net.minecraft.world.level.material.MapColor;
import net.minecraft.world.level.material.PushReaction;
import willatendo.fossilslegacy.server.block.blocks.SkullBlock;
import willatendo.fossilslegacy.server.block.blocks.*;
import willatendo.fossilslegacy.server.fluid.FAFluids;
import willatendo.fossilslegacy.server.item.FAHeadTypes;
import willatendo.fossilslegacy.server.registry.FABlockRegistry;
import willatendo.fossilslegacy.server.utils.FAUtils;
import willatendo.simplelibrary.server.registry.SimpleHolder;
import willatendo.simplelibrary.server.registry.SimpleRegistry;
import willatendo.simplelibrary.server.util.BlockUtils;

import java.util.function.Supplier;

public final class FABlocks {
    public static final FABlockRegistry BLOCKS = new FABlockRegistry(SimpleRegistry.createBlock(FAUtils.ID));

    public static final SimpleHolder<Block> CENOZOIC_FOSSIL_ORE = BLOCKS.registerBlock("cenozoic_fossil_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(3.0F, 3.0F));
    public static final SimpleHolder<Block> DEEPSLATE_CENOZOIC_FOSSIL_ORE = BLOCKS.registerBlock("deepslate_cenozoic_fossil_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.DEEPSLATE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE));
    public static final SimpleHolder<Block> MESOZOIC_FOSSIL_ORE = BLOCKS.registerBlock("mesozoic_fossil_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(3.0F, 3.0F));
    public static final SimpleHolder<Block> DEEPSLATE_MESOZOIC_FOSSIL_ORE = BLOCKS.registerBlock("deepslate_mesozoic_fossil_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.DEEPSLATE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE));
    public static final SimpleHolder<Block> PALAEOZOIC_FOSSIL_ORE = BLOCKS.registerBlock("palaeozoic_fossil_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(3.0F, 3.0F));
    public static final SimpleHolder<Block> DEEPSLATE_PALAEOZOIC_FOSSIL_ORE = BLOCKS.registerBlock("deepslate_palaeozoic_fossil_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.DEEPSLATE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE));
    public static final SimpleHolder<Block> AMBER_ORE = BLOCKS.registerBlock("amber_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(3.0F, 3.0F));
    public static final SimpleHolder<Block> DEEPSLATE_AMBER_ORE = BLOCKS.registerBlock("deepslate_amber_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.DEEPSLATE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE));
    public static final SimpleHolder<Block> PLANT_FOSSIL_ORE = BLOCKS.registerBlock("plant_fossil_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(3.0F, 3.0F));
    public static final SimpleHolder<Block> DEEPSLATE_PLANT_FOSSIL_ORE = BLOCKS.registerBlock("deepslate_plant_fossil_ore", () -> BlockBehaviour.Properties.of().mapColor(MapColor.DEEPSLATE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE));
    public static final SimpleHolder<Block> RELIC_IN_STONE = BLOCKS.registerBlock("relic_in_stone", () -> BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(3.0F, 3.0F));
    public static final SimpleHolder<Block> RELIC_IN_DEEPSLATE = BLOCKS.registerBlock("relic_in_deepslate", () -> BlockBehaviour.Properties.of().mapColor(MapColor.DEEPSLATE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE));
    public static final SimpleHolder<FrozenLeechBlock> FROZEN_LEECH = BLOCKS.registerBlock("frozen_leech", FrozenLeechBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.ICE).friction(0.98F).randomTicks().strength(0.5F).sound(SoundType.GLASS).noOcclusion().isValidSpawn((blockState, blockGetter, blockPos, entityType) -> entityType == EntityType.POLAR_BEAR).isRedstoneConductor(BlockUtils::never));
    public static final SimpleHolder<LeechInIceBlock> LEECH_IN_ICE = BLOCKS.registerBlock("leech_in_ice", LeechInIceBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.ICE).friction(0.98F).randomTicks().strength(0.5F).sound(SoundType.GLASS).noOcclusion().isValidSpawn((blockState, blockGetter, blockPos, entityType) -> entityType == EntityType.POLAR_BEAR).isRedstoneConductor(BlockUtils::never));
    public static final SimpleHolder<SkullBlock> SKULL_BLOCK = BLOCKS.registerBlock("skull_block", SkullBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.XYLOPHONE).sound(SoundType.BONE_BLOCK).strength(1.0F));
    public static final SimpleHolder<SkullBlock> SKULL_LANTERN_BLOCK = BLOCKS.registerBlock("skull_lantern_block", SkullBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.XYLOPHONE).sound(SoundType.BONE_BLOCK).strength(1.0F).lightLevel(blockState -> 15));
    public static final SimpleHolder<AnalyzerBlock> DNA_ANALYZER = BLOCKS.registerBlock("dna_analyzer", AnalyzerBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL).lightLevel(blockState -> blockState.getValue(AnalyzerBlock.ACTIVE) ? 5 : 0));
    public static final SimpleHolder<DNACoderBlock> DNA_CODER = BLOCKS.registerBlock("dna_coder", DNACoderBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL).lightLevel(blockState -> blockState.getValue(AnalyzerBlock.ACTIVE) ? 5 : 0));
    public static final SimpleHolder<DNAHybridizerBlock> DNA_HYBRIDIZER = BLOCKS.registerBlock("dna_hybridizer", DNAHybridizerBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL).noOcclusion().lightLevel(blockState -> blockState.getValue(AnalyzerBlock.ACTIVE) ? 5 : 0));
    public static final SimpleHolder<CultivatorBlock> WHITE_CULTIVATOR = BLOCKS.registerBlock("white_cultivator", properties -> new CultivatorBlock(DyeColor.WHITE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> WHITE_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("white_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.WHITE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> ORANGE_CULTIVATOR = BLOCKS.registerBlock("orange_cultivator", properties -> new CultivatorBlock(DyeColor.ORANGE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> ORANGE_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("orange_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.ORANGE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> MAGENTA_CULTIVATOR = BLOCKS.registerBlock("magenta_cultivator", properties -> new CultivatorBlock(DyeColor.MAGENTA, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> MAGENTA_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("magenta_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.MAGENTA, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> LIGHT_BLUE_CULTIVATOR = BLOCKS.registerBlock("light_blue_cultivator", properties -> new CultivatorBlock(DyeColor.LIGHT_BLUE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> LIGHT_BLUE_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("light_blue_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.LIGHT_BLUE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> YELLOW_CULTIVATOR = BLOCKS.registerBlock("yellow_cultivator", properties -> new CultivatorBlock(DyeColor.YELLOW, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> YELLOW_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("yellow_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.YELLOW, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> LIME_CULTIVATOR = BLOCKS.registerBlock("lime_cultivator", properties -> new CultivatorBlock(DyeColor.LIME, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> LIME_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("lime_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.LIME, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> PINK_CULTIVATOR = BLOCKS.registerBlock("pink_cultivator", properties -> new CultivatorBlock(DyeColor.PINK, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> PINK_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("pink_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.PINK, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> GRAY_CULTIVATOR = BLOCKS.registerBlock("gray_cultivator", properties -> new CultivatorBlock(DyeColor.GRAY, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> GRAY_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("gray_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.GRAY, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> LIGHT_GRAY_CULTIVATOR = BLOCKS.registerBlock("light_gray_cultivator", properties -> new CultivatorBlock(DyeColor.LIGHT_GRAY, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> LIGHT_GRAY_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("light_gray_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.LIGHT_GRAY, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> CYAN_CULTIVATOR = BLOCKS.registerBlock("cyan_cultivator", properties -> new CultivatorBlock(DyeColor.CYAN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> CYAN_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("cyan_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.CYAN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> PURPLE_CULTIVATOR = BLOCKS.registerBlock("purple_cultivator", properties -> new CultivatorBlock(DyeColor.PURPLE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> PURPLE_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("purple_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.PURPLE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> BLUE_CULTIVATOR = BLOCKS.registerBlock("blue_cultivator", properties -> new CultivatorBlock(DyeColor.BLUE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> BLUE_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("blue_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.BLUE, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> BROWN_CULTIVATOR = BLOCKS.registerBlock("brown_cultivator", properties -> new CultivatorBlock(DyeColor.BROWN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> BROWN_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("brown_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.BROWN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> GREEN_CULTIVATOR = BLOCKS.registerBlock("green_cultivator", properties -> new CultivatorBlock(DyeColor.GREEN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> GREEN_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("green_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.GREEN, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> RED_CULTIVATOR = BLOCKS.registerBlock("red_cultivator", properties -> new CultivatorBlock(DyeColor.RED, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> RED_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("red_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.RED, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<CultivatorBlock> BLACK_CULTIVATOR = BLOCKS.registerBlock("black_cultivator", properties -> new CultivatorBlock(DyeColor.BLACK, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).lightLevel(blockState -> 13));
    public static final SimpleHolder<ShatteredCultivatorBlock> BLACK_SHATTERED_CULTIVATOR = BLOCKS.registerBlock("black_shattered_cultivator", properties -> new ShatteredCultivatorBlock(DyeColor.BLACK, properties), () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.HAT).strength(0.3F).sound(SoundType.GLASS).noOcclusion().isValidSpawn(BlockUtils::never).isRedstoneConductor(BlockUtils::never).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never));
    public static final SimpleHolder<ArchaeologyWorkbenchBlock> ARCHAEOLOGY_WORKBENCH = BLOCKS.registerBlock("archaeology_workbench", ArchaeologyWorkbenchBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD));
    public static final SimpleHolder<PalaeontologyTableBlock> PALAEONTOLOGY_TABLE = BLOCKS.registerBlock("palaeontology_table", PalaeontologyTableBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD));
    public static final SimpleHolder<DNARecombinatorBlock> DNA_RECOMBINATOR = BLOCKS.registerBlock("dna_recombinator", DNARecombinatorBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL));
    public static final SimpleHolder<DrumBlock> DRUM = BLOCKS.registerBlock("drum", DrumBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD));
    public static final SimpleHolder<FeederBlock> FEEDER = BLOCKS.registerBlock("feeder", FeederBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL));
    public static final SimpleHolder<PermafrostBlock> PERMAFROST = BLOCKS.registerBlock("permafrost", PermafrostBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.CHIME).strength(0.5F).randomTicks().noOcclusion().sound(SoundType.GRAVEL));
    public static final SimpleHolder<IcedStoneBlock> ICED_STONE = BLOCKS.registerBlock("iced_stone", IcedStoneBlock::new, () -> BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.CHIME).requiresCorrectToolForDrops().strength(1.5F, 6.0F).randomTicks().noOcclusion());
    public static final SimpleHolder<AxolotlspawnBlock> AXOLOTLSPAWN = BLOCKS.registerBlock("axolotlspawn", AxolotlspawnBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.WATER).instabreak().noOcclusion().noCollission().sound(SoundType.FROGSPAWN).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<TimeMachineBlock> TIME_MACHINE = BLOCKS.registerBlock("time_machine", TimeMachineBlock::new, () -> BlockBehaviour.Properties.of().strength(0.3F).lightLevel(blockState -> 14).sound(SoundType.GLASS));
    public static final SimpleHolder<RawSoupCauldronBlock> RAW_CHICKEN_SOUP_CAULDRON = BLOCKS.registerBlock("raw_chicken_soup_cauldron", RawChickenSoupCauldronBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CAULDRON));
    public static final SimpleHolder<SoupCauldronBlock> COOKED_CHICKEN_SOUP_CAULDRON = BLOCKS.registerBlock("cooked_chicken_soup_cauldron", CookedChickenSoupCauldronBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CAULDRON));
    public static final SimpleHolder<RawSoupCauldronBlock> RAW_BERRY_MEDLEY_CAULDRON = BLOCKS.registerBlock("raw_berry_medley_cauldron", RawBerryMedleyCauldronBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CAULDRON));
    public static final SimpleHolder<SoupCauldronBlock> COOKED_BERRY_MEDLEY_CAULDRON = BLOCKS.registerBlock("cooked_berry_medley_cauldron", CookedBerryMedleyCauldronBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CAULDRON));
    public static final SimpleHolder<MayanVaseBlock> MAYAN_VASE = BLOCKS.registerBlock("mayan_vase", MayanVaseBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).strength(0.0F, 0.0F).pushReaction(PushReaction.DESTROY).noOcclusion());
    public static final SimpleHolder<MayanVaseBlock> MAYAN_JADE_VASE = BLOCKS.registerBlock("mayan_jade_vase", MayanVaseBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).strength(0.0F, 0.0F).pushReaction(PushReaction.DESTROY).noOcclusion());
    public static final SimpleHolder<MayanVaseBlock> MAYAN_OCELOT_VASE = BLOCKS.registerBlock("mayan_ocelot_vase", MayanVaseBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).strength(0.0F, 0.0F).pushReaction(PushReaction.DESTROY).noOcclusion());
    public static final SimpleHolder<MayanVaseBlock> MAYAN_VILLAGER_VASE = BLOCKS.registerBlock("mayan_villager_vase", MayanVaseBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).strength(0.0F, 0.0F).pushReaction(PushReaction.DESTROY).noOcclusion());
    public static final SimpleHolder<LlamaStatueBlock> IRON_LLAMA_STATUE = BLOCKS.registerBlock("iron_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<WeatheringCopperLlamaStatueBlock> COPPER_LLAMA_STATUE = BLOCKS.registerBlock("copper_llama_statue", properties -> new WeatheringCopperLlamaStatueBlock(WeatheringCopper.WeatherState.UNAFFECTED, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<WeatheringCopperLlamaStatueBlock> EXPOSED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("exposed_copper_llama_statue", properties -> new WeatheringCopperLlamaStatueBlock(WeatheringCopper.WeatherState.EXPOSED, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<WeatheringCopperLlamaStatueBlock> WEATHERED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("weathered_copper_llama_statue", properties -> new WeatheringCopperLlamaStatueBlock(WeatheringCopper.WeatherState.WEATHERED, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<WeatheringCopperLlamaStatueBlock> OXIDIZED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("oxidized_copper_llama_statue", properties -> new WeatheringCopperLlamaStatueBlock(WeatheringCopper.WeatherState.OXIDIZED, properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<LlamaStatueBlock> WAXED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("waxed_copper_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<LlamaStatueBlock> WAXED_EXPOSED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("waxed_exposed_copper_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<LlamaStatueBlock> WAXED_WEATHERED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("waxed_weathered_copper_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<LlamaStatueBlock> WAXED_OXIDIZED_COPPER_LLAMA_STATUE = BLOCKS.registerBlock("waxed_oxidized_copper_llama_statue", LlamaStatueBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.METAL).instabreak().sound(SoundType.METAL));
    public static final SimpleHolder<DecorationPostBlock> WHITE_DECORATION_POST = BLOCKS.registerBlock("white_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.WHITE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> ORANGE_DECORATION_POST = BLOCKS.registerBlock("orange_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.ORANGE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> MAGENTA_DECORATION_POST = BLOCKS.registerBlock("magenta_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.MAGENTA_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> LIGHT_BLUE_DECORATION_POST = BLOCKS.registerBlock("light_blue_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.LIGHT_BLUE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> YELLOW_DECORATION_POST = BLOCKS.registerBlock("yellow_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.YELLOW_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> LIME_DECORATION_POST = BLOCKS.registerBlock("lime_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.LIME_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> PINK_DECORATION_POST = BLOCKS.registerBlock("pink_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.PINK_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> GRAY_DECORATION_POST = BLOCKS.registerBlock("gray_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.GRAY_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> LIGHT_GRAY_DECORATION_POST = BLOCKS.registerBlock("light_gray_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.LIGHT_GRAY_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> CYAN_DECORATION_POST = BLOCKS.registerBlock("cyan_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.CYAN_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> PURPLE_DECORATION_POST = BLOCKS.registerBlock("purple_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.PURPLE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> BLUE_DECORATION_POST = BLOCKS.registerBlock("blue_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.BLUE_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> BROWN_DECORATION_POST = BLOCKS.registerBlock("brown_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.BROWN_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> GREEN_DECORATION_POST = BLOCKS.registerBlock("green_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.GREEN_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> RED_DECORATION_POST = BLOCKS.registerBlock("red_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.RED_CONCRETE));
    public static final SimpleHolder<DecorationPostBlock> BLACK_DECORATION_POST = BLOCKS.registerBlock("black_decoration_post", DecorationPostBlock::new, () -> BlockBehaviour.Properties.ofFullCopy(Blocks.BLACK_CONCRETE));
    public static final SimpleHolder<SmallCageBlock> SMALL_CAGE = BLOCKS.registerBlock("small_cage", SmallCageBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.5F, 6.0F).noOcclusion());
    public static final SimpleHolder<MediumCageBlock> MEDIUM_CAGE = BLOCKS.registerBlock("medium_cage", MediumCageBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASEDRUM).requiresCorrectToolForDrops().strength(1.5F, 6.0F).noOcclusion());
    public static final SimpleHolder<StraightTrackBlock> STRAIGHT_TRACK = BLOCKS.registerBlock("straight_track", StraightTrackBlock::new, () -> BlockBehaviour.Properties.of().noCollission().strength(0.7F).sound(SoundType.METAL));
    public static final SimpleHolder<CornerTrackBlock> CORNER_TRACK = BLOCKS.registerBlock("corner_track", CornerTrackBlock::new, () -> BlockBehaviour.Properties.of().noCollission().strength(0.7F).sound(SoundType.METAL));
    public static final SimpleHolder<RampTrackBlock> RAMP_TRACK = BLOCKS.registerBlock("ramp_track", RampTrackBlock::new, () -> BlockBehaviour.Properties.of().noCollission().strength(0.7F).sound(SoundType.METAL));
    public static final SimpleHolder<JurassicFernBlock> JURASSIC_FERN = BLOCKS.registerBlock("jurassic_fern", JurassicFernBlock::new, () -> BlockBehaviour.Properties.of().noCollission().instabreak().randomTicks().sound(SoundType.GRASS));
    public static final SimpleHolder<HorsetailBlock> SHORT_HORSETAIL = BLOCKS.registerBlock("short_horsetail", HorsetailBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ).ignitedByLava());
    public static final SimpleHolder<TallHorsetailBlock> TALL_HORSETAIL = BLOCKS.registerBlock("tall_horsetail", TallHorsetailBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ).ignitedByLava());
    public static final SimpleHolder<CycadHeadBlock> CYCAD_HEAD = BLOCKS.registerBlock("cycad_head", CycadHeadBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_GREEN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava().noOcclusion().randomTicks());
    public static final SimpleHolder<CycadLogBlock> CYCAD_LOG = BLOCKS.registerBlock("cycad_log", CycadLogBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<CooksoniaBlock> COOKSONIA = BLOCKS.registerBlock("cooksonia", CooksoniaBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<SimpleGrassyBlock> CLAYTOSMUNDA = BLOCKS.registerBlock("claytosmunda", SimpleGrassyBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ));
    public static final SimpleHolder<SimpleGrassyBlock> CYCADEOIDEA = BLOCKS.registerBlock("cycadeoidea", SimpleGrassyBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ));
    public static final SimpleHolder<SimpleGrassyBlock> NIPA = BLOCKS.registerBlock("nipa", SimpleGrassyBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ));
    public static final SimpleHolder<OnychiopsisBlock> ONYCHIOPSIS = BLOCKS.registerBlock("onychiopsis", OnychiopsisBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XYZ));
    public static final SimpleHolder<Block> PACHYPTERIS = BLOCKS.registerBlock("pachypteris", () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ));
    public static final SimpleHolder<Block> PACHYPODIUM = BLOCKS.registerBlock("pachypodium", () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ));
    public static final SimpleHolder<Block> WILLIAMSONIA = BLOCKS.registerBlock("williamsonia", () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ));
    public static final SimpleHolder<MacrotaeniopterisBlock> MACROTAENIOPTERIS = BLOCKS.registerBlock("macrotaeniopteris", MacrotaeniopterisBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ));
    public static final SimpleHolder<DipterisBlock> DIPTERIS = BLOCKS.registerBlock("dipteris", DipterisBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ));
    public static final SimpleHolder<ZamitesHeadBlock> ZAMITES_HEAD = BLOCKS.registerBlock("zamites_head", ZamitesHeadBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_GREEN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava().noOcclusion().randomTicks());
    public static final SimpleHolder<ZamitesLogBlock> ZAMITES_LOG = BLOCKS.registerBlock("zamites_log", ZamitesLogBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<ZamitesBranchBlock> ZAMITES_BRANCH = BLOCKS.registerBlock("zamites_branch", ZamitesBranchBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());
    public static final SimpleHolder<SalviniaBlock> SALVINIA = BLOCKS.registerBlock("salvinia", SalviniaBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).instabreak().sound(SoundType.LILY_PAD).noOcclusion().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<SalviniaBlock> LOTUS = BLOCKS.registerBlock("lotus", SalviniaBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).instabreak().sound(SoundType.LILY_PAD).noOcclusion().pushReaction(PushReaction.DESTROY));
    public static final SimpleHolder<SarcandraBlock> SARCANDRA = BLOCKS.registerBlock("sarcandra", SarcandraBlock::new, () -> BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY).dynamicShape().offsetType(BlockBehaviour.OffsetType.XZ).randomTicks());
    public static final SimpleHolder<HeadBlock> ANKYLOSAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.ANKYLOSAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_ANKYLOSAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.ANKYLOSAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> BARYONYX_HEAD = BLOCKS.registerHead(FAHeadTypes.BARYONYX);
    public static final SimpleHolder<WallHeadBlock> WALL_BARYONYX_HEAD = BLOCKS.registerWallHead(FABlocks.BARYONYX_HEAD);
    public static final SimpleHolder<HeadBlock> BRACHIOSAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.BRACHIOSAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_BRACHIOSAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.BRACHIOSAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> CARNOTAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.CARNOTAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_CARNOTAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.CARNOTAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> COMPSOGNATHUS_HEAD = BLOCKS.registerHead(FAHeadTypes.COMPSOGNATHUS);
    public static final SimpleHolder<WallHeadBlock> WALL_COMPSOGNATHUS_HEAD = BLOCKS.registerWallHead(FABlocks.COMPSOGNATHUS_HEAD);
    public static final SimpleHolder<HeadBlock> CRYOLOPHOSAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.CRYOLOPHOSAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_CRYOLOPHOSAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.CRYOLOPHOSAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> DILOPHOSAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.DILOPHOSAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_DILOPHOSAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.DILOPHOSAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> DIMETRODON_HEAD = BLOCKS.registerHead(FAHeadTypes.DIMETRODON);
    public static final SimpleHolder<WallHeadBlock> WALL_DIMETRODON_HEAD = BLOCKS.registerWallHead(FABlocks.DIMETRODON_HEAD);
    public static final SimpleHolder<HeadBlock> DISTORTUS_REX_HEAD = BLOCKS.registerHead(FAHeadTypes.DISTORTUS_REX);
    public static final SimpleHolder<WallHeadBlock> WALL_DISTORTUS_REX_HEAD = BLOCKS.registerWallHead(FABlocks.DISTORTUS_REX_HEAD);
    public static final SimpleHolder<HeadBlock> DODO_HEAD = BLOCKS.registerHead(FAHeadTypes.DODO);
    public static final SimpleHolder<WallHeadBlock> WALL_DODO_HEAD = BLOCKS.registerWallHead(FABlocks.DODO_HEAD);
    public static final SimpleHolder<HeadBlock> DRYOSAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.DRYOSAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_DRYOSAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.DRYOSAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> ELASMOTHERIUM_HEAD = BLOCKS.registerHead(FAHeadTypes.ELASMOTHERIUM);
    public static final SimpleHolder<WallHeadBlock> WALL_ELASMOTHERIUM_HEAD = BLOCKS.registerWallHead(FABlocks.ELASMOTHERIUM_HEAD);
    public static final SimpleHolder<HeadBlock> FUTABASAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.FUTABASAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_FUTABASAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.FUTABASAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> GALLIMIMUS_HEAD = BLOCKS.registerHead(FAHeadTypes.GALLIMIMUS);
    public static final SimpleHolder<WallHeadBlock> WALL_GALLIMIMUS_HEAD = BLOCKS.registerWallHead(FABlocks.GALLIMIMUS_HEAD);
    public static final SimpleHolder<HeadBlock> ICHTHYOSAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.ICHTHYOSAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_ICHTHYOSAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.ICHTHYOSAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> MAMMOTH_HEAD = BLOCKS.registerHead(FAHeadTypes.MAMMOTH);
    public static final SimpleHolder<WallHeadBlock> WALL_MAMMOTH_HEAD = BLOCKS.registerWallHead(FABlocks.MAMMOTH_HEAD);
    public static final SimpleHolder<HeadBlock> MOA_HEAD = BLOCKS.registerHead(FAHeadTypes.MOA);
    public static final SimpleHolder<WallHeadBlock> WALL_MOA_HEAD = BLOCKS.registerWallHead(FABlocks.MOA_HEAD);
    public static final SimpleHolder<HeadBlock> MOSASAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.MOSASAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_MOSASAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.MOSASAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> PACHYCEPHALOSAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.PACHYCEPHALOSAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_PACHYCEPHALOSAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.PACHYCEPHALOSAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> PTERANODON_HEAD = BLOCKS.registerHead(FAHeadTypes.PTERANODON);
    public static final SimpleHolder<WallHeadBlock> WALL_PTERANODON_HEAD = BLOCKS.registerWallHead(FABlocks.PTERANODON_HEAD);
    public static final SimpleHolder<HeadBlock> SMILODON_HEAD = BLOCKS.registerHead(FAHeadTypes.SMILODON);
    public static final SimpleHolder<WallHeadBlock> WALL_SMILODON_HEAD = BLOCKS.registerWallHead(FABlocks.SMILODON_HEAD);
    public static final SimpleHolder<HeadBlock> SPINOSAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.SPINOSAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_SPINOSAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.SPINOSAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> STEGOSAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.STEGOSAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_STEGOSAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.STEGOSAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> THERIZINOSAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.THERIZINOSAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_THERIZINOSAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.THERIZINOSAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> TRICERATOPS_HEAD = BLOCKS.registerHead(FAHeadTypes.TRICERATOPS);
    public static final SimpleHolder<WallHeadBlock> WALL_TRICERATOPS_HEAD = BLOCKS.registerWallHead(FABlocks.TRICERATOPS_HEAD);
    public static final SimpleHolder<HeadBlock> TYRANNOSAURUS_HEAD = BLOCKS.registerHead(FAHeadTypes.TYRANNOSAURUS);
    public static final SimpleHolder<WallHeadBlock> WALL_TYRANNOSAURUS_HEAD = BLOCKS.registerWallHead(FABlocks.TYRANNOSAURUS_HEAD);
    public static final SimpleHolder<HeadBlock> VELOCIRAPTOR_HEAD = BLOCKS.registerHead(FAHeadTypes.VELOCIRAPTOR);
    public static final SimpleHolder<WallHeadBlock> WALL_VELOCIRAPTOR_HEAD = BLOCKS.registerWallHead(FABlocks.VELOCIRAPTOR_HEAD);
    public static final SimpleHolder<Block> LEPIDODENDRON_PLANKS = BLOCKS.registerPlanks("lepidodendron_planks", MapColor.TERRACOTTA_GREEN);
    public static final SimpleHolder<SaplingBlock> LEPIDODENDRON_SAPLING = BLOCKS.registerSapling("lepidodendron_sapling", FATreeGrowers.LEPIDODENDRON);
    public static final SimpleHolder<RotatedPillarBlock> LEPIDODENDRON_LOG = BLOCKS.registerLog("lepidodendron_log", MapColor.TERRACOTTA_GREEN, MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_LEPIDODENDRON_LOG = BLOCKS.registerStrippedLog("stripped_lepidodendron_log", MapColor.TERRACOTTA_GREEN);
    public static final SimpleHolder<RotatedPillarBlock> LEPIDODENDRON_WOOD = BLOCKS.registerWood("lepidodendron_wood", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_LEPIDODENDRON_WOOD = BLOCKS.registerStrippedWood("stripped_lepidodendron_wood", MapColor.TERRACOTTA_GREEN);
    public static final SimpleHolder<LeavesBlock> LEPIDODENDRON_LEAVES = BLOCKS.registerLeaves("lepidodendron_leaves");
    public static final SimpleHolder<StairBlock> LEPIDODENDRON_STAIRS = BLOCKS.registerStairs("lepidodendron_stairs", FABlocks.LEPIDODENDRON_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> LEPIDODENDRON_SIGN = BLOCKS.registerSign("lepidodendron_sign", FAWoodTypes.LEPIDODENDRON, MapColor.TERRACOTTA_GREEN);
    public static final SimpleHolder<FossilsWallSignBlock> LEPIDODENDRON_WALL_SIGN = BLOCKS.registerWallSign("lepidodendron_wall_sign", FABlocks.LEPIDODENDRON_SIGN);
    public static final SimpleHolder<DoorBlock> LEPIDODENDRON_DOOR = BLOCKS.registerDoor("lepidodendron_door", FABlockSetTypes.LEPIDODENDRON, FABlocks.LEPIDODENDRON_PLANKS);
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> LEPIDODENDRON_HANGING_SIGN = BLOCKS.registerHangingSign("lepidodendron_hanging_sign", FAWoodTypes.LEPIDODENDRON, FABlocks.LEPIDODENDRON_LOG);
    public static final SimpleHolder<FossilsWallHangingSignBlock> LEPIDODENDRON_WALL_HANGING_SIGN = BLOCKS.registerWallHangingSign("lepidodendron_wall_hanging_sign", FABlocks.LEPIDODENDRON_HANGING_SIGN);
    public static final SimpleHolder<PressurePlateBlock> LEPIDODENDRON_PRESSURE_PLATE = BLOCKS.registerPressurePlate("lepidodendron_pressure_plate", FABlockSetTypes.LEPIDODENDRON, FABlocks.LEPIDODENDRON_PLANKS);
    public static final SimpleHolder<FenceBlock> LEPIDODENDRON_FENCE = BLOCKS.registerFence("lepidodendron_fence", FABlocks.LEPIDODENDRON_PLANKS);
    public static final SimpleHolder<TrapDoorBlock> LEPIDODENDRON_TRAPDOOR = BLOCKS.registerTrapdoor("lepidodendron_trapdoor", FABlockSetTypes.LEPIDODENDRON, MapColor.TERRACOTTA_GREEN);
    public static final SimpleHolder<FenceGateBlock> LEPIDODENDRON_FENCE_GATE = BLOCKS.registerFenceGate("lepidodendron_fence_gate", FAWoodTypes.LEPIDODENDRON, FABlocks.LEPIDODENDRON_PLANKS);
    public static final SimpleHolder<FlowerPotBlock> POTTED_LEPIDODENDRON_SAPLING = BLOCKS.registerPottedSapling("potted_lepidodendron_sapling", FABlocks.LEPIDODENDRON_SAPLING);
    public static final SimpleHolder<ButtonBlock> LEPIDODENDRON_BUTTON = BLOCKS.registerButton("lepidodendron_button", FABlockSetTypes.LEPIDODENDRON);
    public static final SimpleHolder<SlabBlock> LEPIDODENDRON_SLAB = BLOCKS.registerSlab("lepidodendron_slab", MapColor.TERRACOTTA_GREEN);
    public static final SimpleHolder<Block> SIGILLARIA_PLANKS = BLOCKS.registerPlanks("sigillaria_planks", MapColor.TERRACOTTA_BLACK);
    public static final SimpleHolder<SaplingBlock> SIGILLARIA_SAPLING = BLOCKS.registerSapling("sigillaria_sapling", FATreeGrowers.SIGILLARIA);
    public static final SimpleHolder<RotatedPillarBlock> SIGILLARIA_LOG = BLOCKS.registerLog("sigillaria_log", MapColor.TERRACOTTA_BLACK, MapColor.TERRACOTTA_GRAY);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_SIGILLARIA_LOG = BLOCKS.registerStrippedLog("stripped_sigillaria_log", MapColor.TERRACOTTA_BLACK);
    public static final SimpleHolder<RotatedPillarBlock> SIGILLARIA_WOOD = BLOCKS.registerWood("sigillaria_wood", MapColor.TERRACOTTA_GRAY);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_SIGILLARIA_WOOD = BLOCKS.registerStrippedWood("stripped_sigillaria_wood", MapColor.TERRACOTTA_BLACK);
    public static final SimpleHolder<LeavesBlock> SIGILLARIA_LEAVES = BLOCKS.registerLeaves("sigillaria_leaves");
    public static final SimpleHolder<StairBlock> SIGILLARIA_STAIRS = BLOCKS.registerStairs("sigillaria_stairs", FABlocks.SIGILLARIA_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> SIGILLARIA_SIGN = BLOCKS.registerSign("sigillaria_sign", FAWoodTypes.SIGILLARIA, MapColor.TERRACOTTA_BLACK);
    public static final SimpleHolder<FossilsWallSignBlock> SIGILLARIA_WALL_SIGN = BLOCKS.registerWallSign("sigillaria_wall_sign", FABlocks.SIGILLARIA_SIGN);
    public static final SimpleHolder<DoorBlock> SIGILLARIA_DOOR = BLOCKS.registerDoor("sigillaria_door", FABlockSetTypes.SIGILLARIA, FABlocks.SIGILLARIA_PLANKS);
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> SIGILLARIA_HANGING_SIGN = BLOCKS.registerHangingSign("sigillaria_hanging_sign", FAWoodTypes.SIGILLARIA, FABlocks.SIGILLARIA_LOG);
    public static final SimpleHolder<FossilsWallHangingSignBlock> SIGILLARIA_WALL_HANGING_SIGN = BLOCKS.registerWallHangingSign("sigillaria_wall_hanging_sign", FABlocks.SIGILLARIA_HANGING_SIGN);
    public static final SimpleHolder<PressurePlateBlock> SIGILLARIA_PRESSURE_PLATE = BLOCKS.registerPressurePlate("sigillaria_pressure_plate", FABlockSetTypes.SIGILLARIA, FABlocks.SIGILLARIA_PLANKS);
    public static final SimpleHolder<FenceBlock> SIGILLARIA_FENCE = BLOCKS.registerFence("sigillaria_fence", FABlocks.SIGILLARIA_PLANKS);
    public static final SimpleHolder<TrapDoorBlock> SIGILLARIA_TRAPDOOR = BLOCKS.registerTrapdoor("sigillaria_trapdoor", FABlockSetTypes.SIGILLARIA, MapColor.TERRACOTTA_BLACK);
    public static final SimpleHolder<FenceGateBlock> SIGILLARIA_FENCE_GATE = BLOCKS.registerFenceGate("sigillaria_fence_gate", FAWoodTypes.SIGILLARIA, FABlocks.SIGILLARIA_PLANKS);
    public static final SimpleHolder<FlowerPotBlock> POTTED_SIGILLARIA_SAPLING = BLOCKS.registerPottedSapling("potted_sigillaria_sapling", FABlocks.SIGILLARIA_SAPLING);
    public static final SimpleHolder<ButtonBlock> SIGILLARIA_BUTTON = BLOCKS.registerButton("sigillaria_button", FABlockSetTypes.SIGILLARIA);
    public static final SimpleHolder<SlabBlock> SIGILLARIA_SLAB = BLOCKS.registerSlab("sigillaria_slab", MapColor.TERRACOTTA_BLACK);
    public static final SimpleHolder<Block> CALAMITES_PLANKS = BLOCKS.registerPlanks("calamites_planks", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<SaplingBlock> CALAMITES_SAPLING = BLOCKS.registerSapling("calamites_sapling", FATreeGrowers.CALAMITES);
    public static final SimpleHolder<RotatedPillarBlock> CALAMITES_LOG = BLOCKS.registerLog("calamites_log", MapColor.TERRACOTTA_BROWN, MapColor.TERRACOTTA_GREEN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_CALAMITES_LOG = BLOCKS.registerStrippedLog("stripped_calamites_log", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> CALAMITES_WOOD = BLOCKS.registerWood("calamites_wood", MapColor.TERRACOTTA_GREEN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_CALAMITES_WOOD = BLOCKS.registerStrippedWood("stripped_calamites_wood", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<LeavesBlock> CALAMITES_LEAVES = BLOCKS.registerLeaves("calamites_leaves");
    public static final SimpleHolder<StairBlock> CALAMITES_STAIRS = BLOCKS.registerStairs("calamites_stairs", FABlocks.CALAMITES_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> CALAMITES_SIGN = BLOCKS.registerSign("calamites_sign", FAWoodTypes.CALAMITES, MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<FossilsWallSignBlock> CALAMITES_WALL_SIGN = BLOCKS.registerWallSign("calamites_wall_sign", FABlocks.CALAMITES_SIGN);
    public static final SimpleHolder<DoorBlock> CALAMITES_DOOR = BLOCKS.registerDoor("calamites_door", FABlockSetTypes.CALAMITES, FABlocks.CALAMITES_PLANKS);
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> CALAMITES_HANGING_SIGN = BLOCKS.registerHangingSign("calamites_hanging_sign", FAWoodTypes.CALAMITES, FABlocks.CALAMITES_LOG);
    public static final SimpleHolder<FossilsWallHangingSignBlock> CALAMITES_WALL_HANGING_SIGN = BLOCKS.registerWallHangingSign("calamites_wall_hanging_sign", FABlocks.CALAMITES_HANGING_SIGN);
    public static final SimpleHolder<PressurePlateBlock> CALAMITES_PRESSURE_PLATE = BLOCKS.registerPressurePlate("calamites_pressure_plate", FABlockSetTypes.CALAMITES, FABlocks.CALAMITES_PLANKS);
    public static final SimpleHolder<FenceBlock> CALAMITES_FENCE = BLOCKS.registerFence("calamites_fence", FABlocks.CALAMITES_PLANKS);
    public static final SimpleHolder<TrapDoorBlock> CALAMITES_TRAPDOOR = BLOCKS.registerTrapdoor("calamites_trapdoor", FABlockSetTypes.CALAMITES, MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<FenceGateBlock> CALAMITES_FENCE_GATE = BLOCKS.registerFenceGate("calamites_fence_gate", FAWoodTypes.CALAMITES, FABlocks.CALAMITES_PLANKS);
    public static final SimpleHolder<FlowerPotBlock> POTTED_CALAMITES_SAPLING = BLOCKS.registerPottedSapling("potted_calamites_sapling", FABlocks.CALAMITES_SAPLING);
    public static final SimpleHolder<ButtonBlock> CALAMITES_BUTTON = BLOCKS.registerButton("calamites_button", FABlockSetTypes.CALAMITES);
    public static final SimpleHolder<SlabBlock> CALAMITES_SLAB = BLOCKS.registerSlab("calamites_slab", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<Block> ARCHAEOPTERIS_PLANKS = BLOCKS.registerPlanks("archaeopteris_planks", MapColor.TERRACOTTA_YELLOW);
    public static final SimpleHolder<SaplingBlock> ARCHAEOPTERIS_SAPLING = BLOCKS.registerSapling("archaeopteris_sapling", FATreeGrowers.ARCHAEOPTERIS);
    public static final SimpleHolder<RotatedPillarBlock> ARCHAEOPTERIS_LOG = BLOCKS.registerLog("archaeopteris_log", MapColor.TERRACOTTA_YELLOW, MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_ARCHAEOPTERIS_LOG = BLOCKS.registerStrippedLog("stripped_archaeopteris_log", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> ARCHAEOPTERIS_WOOD = BLOCKS.registerWood("archaeopteris_wood", MapColor.TERRACOTTA_YELLOW);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_ARCHAEOPTERIS_WOOD = BLOCKS.registerStrippedWood("stripped_archaeopteris_wood", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<LeavesBlock> ARCHAEOPTERIS_LEAVES = BLOCKS.registerLeaves("archaeopteris_leaves");
    public static final SimpleHolder<StairBlock> ARCHAEOPTERIS_STAIRS = BLOCKS.registerStairs("archaeopteris_stairs", FABlocks.ARCHAEOPTERIS_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> ARCHAEOPTERIS_SIGN = BLOCKS.registerSign("archaeopteris_sign", FAWoodTypes.ARCHAEOPTERIS, MapColor.TERRACOTTA_YELLOW);
    public static final SimpleHolder<FossilsWallSignBlock> ARCHAEOPTERIS_WALL_SIGN = BLOCKS.registerWallSign("archaeopteris_wall_sign", FABlocks.ARCHAEOPTERIS_SIGN);
    public static final SimpleHolder<DoorBlock> ARCHAEOPTERIS_DOOR = BLOCKS.registerDoor("archaeopteris_door", FABlockSetTypes.ARCHAEOPTERIS, FABlocks.ARCHAEOPTERIS_PLANKS);
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> ARCHAEOPTERIS_HANGING_SIGN = BLOCKS.registerHangingSign("archaeopteris_hanging_sign", FAWoodTypes.ARCHAEOPTERIS, FABlocks.ARCHAEOPTERIS_LOG);
    public static final SimpleHolder<FossilsWallHangingSignBlock> ARCHAEOPTERIS_WALL_HANGING_SIGN = BLOCKS.registerWallHangingSign("archaeopteris_wall_hanging_sign", FABlocks.ARCHAEOPTERIS_HANGING_SIGN);
    public static final SimpleHolder<PressurePlateBlock> ARCHAEOPTERIS_PRESSURE_PLATE = BLOCKS.registerPressurePlate("archaeopteris_pressure_plate", FABlockSetTypes.ARCHAEOPTERIS, FABlocks.ARCHAEOPTERIS_PLANKS);
    public static final SimpleHolder<FenceBlock> ARCHAEOPTERIS_FENCE = BLOCKS.registerFence("archaeopteris_fence", FABlocks.ARCHAEOPTERIS_PLANKS);
    public static final SimpleHolder<TrapDoorBlock> ARCHAEOPTERIS_TRAPDOOR = BLOCKS.registerTrapdoor("archaeopteris_trapdoor", FABlockSetTypes.ARCHAEOPTERIS, MapColor.TERRACOTTA_YELLOW);
    public static final SimpleHolder<FenceGateBlock> ARCHAEOPTERIS_FENCE_GATE = BLOCKS.registerFenceGate("archaeopteris_fence_gate", FAWoodTypes.ARCHAEOPTERIS, FABlocks.ARCHAEOPTERIS_PLANKS);
    public static final SimpleHolder<FlowerPotBlock> POTTED_ARCHAEOPTERIS_SAPLING = BLOCKS.registerPottedSapling("potted_archaeopteris_sapling", FABlocks.ARCHAEOPTERIS_SAPLING);
    public static final SimpleHolder<ButtonBlock> ARCHAEOPTERIS_BUTTON = BLOCKS.registerButton("archaeopteris_button", FABlockSetTypes.ARCHAEOPTERIS);
    public static final SimpleHolder<SlabBlock> ARCHAEOPTERIS_SLAB = BLOCKS.registerSlab("archaeopteris_slab", MapColor.TERRACOTTA_YELLOW);
    public static final SimpleHolder<Block> GINKGO_PLANKS = BLOCKS.registerPlanks("ginkgo_planks", MapColor.TERRACOTTA_ORANGE);
    public static final SimpleHolder<SaplingBlock> GINKGO_SAPLING = BLOCKS.registerSapling("ginkgo_sapling", FATreeGrowers.GINKGO);
    public static final SimpleHolder<RotatedPillarBlock> GINKGO_LOG = BLOCKS.registerLog("ginkgo_log", MapColor.TERRACOTTA_ORANGE, MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_GINKGO_LOG = BLOCKS.registerStrippedLog("stripped_ginkgo_log", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> GINKGO_WOOD = BLOCKS.registerWood("ginkgo_wood", MapColor.TERRACOTTA_ORANGE);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_GINKGO_WOOD = BLOCKS.registerStrippedWood("stripped_ginkgo_wood", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<LeavesBlock> GINKGO_LEAVES = BLOCKS.registerLeaves("ginkgo_leaves");
    public static final SimpleHolder<StairBlock> GINKGO_STAIRS = BLOCKS.registerStairs("ginkgo_stairs", FABlocks.GINKGO_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> GINKGO_SIGN = BLOCKS.registerSign("ginkgo_sign", FAWoodTypes.GINKGO, MapColor.TERRACOTTA_ORANGE);
    public static final SimpleHolder<FossilsWallSignBlock> GINKGO_WALL_SIGN = BLOCKS.registerWallSign("ginkgo_wall_sign", FABlocks.GINKGO_SIGN);
    public static final SimpleHolder<DoorBlock> GINKGO_DOOR = BLOCKS.registerDoor("ginkgo_door", FABlockSetTypes.GINKGO, FABlocks.GINKGO_PLANKS);
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> GINKGO_HANGING_SIGN = BLOCKS.registerHangingSign("ginkgo_hanging_sign", FAWoodTypes.GINKGO, FABlocks.GINKGO_LOG);
    public static final SimpleHolder<FossilsWallHangingSignBlock> GINKGO_WALL_HANGING_SIGN = BLOCKS.registerWallHangingSign("ginkgo_wall_hanging_sign", FABlocks.GINKGO_HANGING_SIGN);
    public static final SimpleHolder<PressurePlateBlock> GINKGO_PRESSURE_PLATE = BLOCKS.registerPressurePlate("ginkgo_pressure_plate", FABlockSetTypes.GINKGO, FABlocks.GINKGO_PLANKS);
    public static final SimpleHolder<FenceBlock> GINKGO_FENCE = BLOCKS.registerFence("ginkgo_fence", FABlocks.GINKGO_PLANKS);
    public static final SimpleHolder<TrapDoorBlock> GINKGO_TRAPDOOR = BLOCKS.registerTrapdoor("ginkgo_trapdoor", FABlockSetTypes.GINKGO, MapColor.TERRACOTTA_ORANGE);
    public static final SimpleHolder<FenceGateBlock> GINKGO_FENCE_GATE = BLOCKS.registerFenceGate("ginkgo_fence_gate", FAWoodTypes.GINKGO, FABlocks.GINKGO_PLANKS);
    public static final SimpleHolder<FlowerPotBlock> POTTED_GINKGO_SAPLING = BLOCKS.registerPottedSapling("potted_ginkgo_sapling", FABlocks.GINKGO_SAPLING);
    public static final SimpleHolder<ButtonBlock> GINKGO_BUTTON = BLOCKS.registerButton("ginkgo_button", FABlockSetTypes.GINKGO);
    public static final SimpleHolder<SlabBlock> GINKGO_SLAB = BLOCKS.registerSlab("ginkgo_slab", MapColor.TERRACOTTA_ORANGE);
    public static final SimpleHolder<Block> ARAUCARIA_PLANKS = BLOCKS.registerPlanks("araucaria_planks", MapColor.TERRACOTTA_LIGHT_BLUE);
    public static final SimpleHolder<SaplingBlock> ARAUCARIA_SAPLING = BLOCKS.registerSapling("araucaria_sapling", FATreeGrowers.ARAUCARIA);
    public static final SimpleHolder<RotatedPillarBlock> ARAUCARIA_LOG = BLOCKS.registerLog("araucaria_log", MapColor.TERRACOTTA_LIGHT_BLUE, MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_ARAUCARIA_LOG = BLOCKS.registerStrippedLog("stripped_araucaria_log", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> ARAUCARIA_WOOD = BLOCKS.registerWood("araucaria_wood", MapColor.TERRACOTTA_LIGHT_BLUE);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_ARAUCARIA_WOOD = BLOCKS.registerStrippedWood("stripped_araucaria_wood", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<LeavesBlock> ARAUCARIA_LEAVES = BLOCKS.registerLeaves("araucaria_leaves");
    public static final SimpleHolder<StairBlock> ARAUCARIA_STAIRS = BLOCKS.registerStairs("araucaria_stairs", FABlocks.ARAUCARIA_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> ARAUCARIA_SIGN = BLOCKS.registerSign("araucaria_sign", FAWoodTypes.ARAUCARIA, MapColor.TERRACOTTA_LIGHT_BLUE);
    public static final SimpleHolder<FossilsWallSignBlock> ARAUCARIA_WALL_SIGN = BLOCKS.registerWallSign("araucaria_wall_sign", FABlocks.ARAUCARIA_SIGN);
    public static final SimpleHolder<DoorBlock> ARAUCARIA_DOOR = BLOCKS.registerDoor("araucaria_door", FABlockSetTypes.ARAUCARIA, FABlocks.ARAUCARIA_PLANKS);
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> ARAUCARIA_HANGING_SIGN = BLOCKS.registerHangingSign("araucaria_hanging_sign", FAWoodTypes.ARAUCARIA, FABlocks.ARAUCARIA_LOG);
    public static final SimpleHolder<FossilsWallHangingSignBlock> ARAUCARIA_WALL_HANGING_SIGN = BLOCKS.registerWallHangingSign("araucaria_wall_hanging_sign", FABlocks.ARAUCARIA_HANGING_SIGN);
    public static final SimpleHolder<PressurePlateBlock> ARAUCARIA_PRESSURE_PLATE = BLOCKS.registerPressurePlate("araucaria_pressure_plate", FABlockSetTypes.ARAUCARIA, FABlocks.ARAUCARIA_PLANKS);
    public static final SimpleHolder<FenceBlock> ARAUCARIA_FENCE = BLOCKS.registerFence("araucaria_fence", FABlocks.ARAUCARIA_PLANKS);
    public static final SimpleHolder<TrapDoorBlock> ARAUCARIA_TRAPDOOR = BLOCKS.registerTrapdoor("araucaria_trapdoor", FABlockSetTypes.ARAUCARIA, MapColor.TERRACOTTA_LIGHT_BLUE);
    public static final SimpleHolder<FenceGateBlock> ARAUCARIA_FENCE_GATE = BLOCKS.registerFenceGate("araucaria_fence_gate", FAWoodTypes.ARAUCARIA, FABlocks.ARAUCARIA_PLANKS);
    public static final SimpleHolder<FlowerPotBlock> POTTED_ARAUCARIA_SAPLING = BLOCKS.registerPottedSapling("potted_araucaria_sapling", FABlocks.ARAUCARIA_SAPLING);
    public static final SimpleHolder<ButtonBlock> ARAUCARIA_BUTTON = BLOCKS.registerButton("araucaria_button", FABlockSetTypes.ARAUCARIA);
    public static final SimpleHolder<SlabBlock> ARAUCARIA_SLAB = BLOCKS.registerSlab("araucaria_slab", MapColor.TERRACOTTA_LIGHT_BLUE);
    public static final SimpleHolder<Block> ARAUCARIOXYLON_PLANKS = BLOCKS.registerPlanks("araucarioxylon_planks", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<SaplingBlock> ARAUCARIOXYLON_SAPLING = BLOCKS.registerSapling("araucarioxylon_sapling", FATreeGrowers.ARAUCARIOXYLON);
    public static final SimpleHolder<RotatedPillarBlock> ARAUCARIOXYLON_LOG = BLOCKS.registerLog("araucarioxylon_log", MapColor.TERRACOTTA_BROWN, MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_ARAUCARIOXYLON_LOG = BLOCKS.registerStrippedLog("stripped_araucarioxylon_log", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> ARAUCARIOXYLON_WOOD = BLOCKS.registerWood("araucarioxylon_wood", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_ARAUCARIOXYLON_WOOD = BLOCKS.registerStrippedWood("stripped_araucarioxylon_wood", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<LeavesBlock> ARAUCARIOXYLON_LEAVES = BLOCKS.registerLeaves("araucarioxylon_leaves");
    public static final SimpleHolder<StairBlock> ARAUCARIOXYLON_STAIRS = BLOCKS.registerStairs("araucarioxylon_stairs", FABlocks.ARAUCARIOXYLON_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> ARAUCARIOXYLON_SIGN = BLOCKS.registerSign("araucarioxylon_sign", FAWoodTypes.ARAUCARIOXYLON, MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<FossilsWallSignBlock> ARAUCARIOXYLON_WALL_SIGN = BLOCKS.registerWallSign("araucarioxylon_wall_sign", FABlocks.ARAUCARIOXYLON_SIGN);
    public static final SimpleHolder<DoorBlock> ARAUCARIOXYLON_DOOR = BLOCKS.registerDoor("araucarioxylon_door", FABlockSetTypes.ARAUCARIOXYLON, FABlocks.ARAUCARIOXYLON_PLANKS);
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> ARAUCARIOXYLON_HANGING_SIGN = BLOCKS.registerHangingSign("araucarioxylon_hanging_sign", FAWoodTypes.ARAUCARIOXYLON, FABlocks.ARAUCARIOXYLON_LOG);
    public static final SimpleHolder<FossilsWallHangingSignBlock> ARAUCARIOXYLON_WALL_HANGING_SIGN = BLOCKS.registerWallHangingSign("araucarioxylon_wall_hanging_sign", FABlocks.ARAUCARIOXYLON_HANGING_SIGN);
    public static final SimpleHolder<PressurePlateBlock> ARAUCARIOXYLON_PRESSURE_PLATE = BLOCKS.registerPressurePlate("araucarioxylon_pressure_plate", FABlockSetTypes.ARAUCARIOXYLON, FABlocks.ARAUCARIOXYLON_PLANKS);
    public static final SimpleHolder<FenceBlock> ARAUCARIOXYLON_FENCE = BLOCKS.registerFence("araucarioxylon_fence", FABlocks.ARAUCARIOXYLON_PLANKS);
    public static final SimpleHolder<TrapDoorBlock> ARAUCARIOXYLON_TRAPDOOR = BLOCKS.registerTrapdoor("araucarioxylon_trapdoor", FABlockSetTypes.ARAUCARIOXYLON, MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<FenceGateBlock> ARAUCARIOXYLON_FENCE_GATE = BLOCKS.registerFenceGate("araucarioxylon_fence_gate", FAWoodTypes.ARAUCARIOXYLON, FABlocks.ARAUCARIOXYLON_PLANKS);
    public static final SimpleHolder<FlowerPotBlock> POTTED_ARAUCARIOXYLON_SAPLING = BLOCKS.registerPottedSapling("potted_araucarioxylon_sapling", FABlocks.ARAUCARIOXYLON_SAPLING);
    public static final SimpleHolder<ButtonBlock> ARAUCARIOXYLON_BUTTON = BLOCKS.registerButton("araucarioxylon_button", FABlockSetTypes.ARAUCARIOXYLON);
    public static final SimpleHolder<SlabBlock> ARAUCARIOXYLON_SLAB = BLOCKS.registerSlab("araucarioxylon_slab", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<Block> CORDAITES_PLANKS = BLOCKS.registerPlanks("cordaites_planks", MapColor.TERRACOTTA_PURPLE);
    public static final SimpleHolder<SaplingBlock> CORDAITES_SAPLING = BLOCKS.registerSapling("cordaites_sapling", FATreeGrowers.CORDAITES);
    public static final SimpleHolder<RotatedPillarBlock> CORDAITES_LOG = BLOCKS.registerLog("cordaites_log", MapColor.TERRACOTTA_PURPLE, MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_CORDAITES_LOG = BLOCKS.registerStrippedLog("stripped_cordaites_log", MapColor.TERRACOTTA_PURPLE);
    public static final SimpleHolder<RotatedPillarBlock> CORDAITES_WOOD = BLOCKS.registerWood("cordaites_wood", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_CORDAITES_WOOD = BLOCKS.registerStrippedWood("stripped_cordaites_wood", MapColor.TERRACOTTA_PURPLE);
    public static final SimpleHolder<LeavesBlock> CORDAITES_LEAVES = BLOCKS.registerLeaves("cordaites_leaves");
    public static final SimpleHolder<StairBlock> CORDAITES_STAIRS = BLOCKS.registerStairs("cordaites_stairs", FABlocks.CORDAITES_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> CORDAITES_SIGN = BLOCKS.registerSign("cordaites_sign", FAWoodTypes.CORDAITES, MapColor.TERRACOTTA_PURPLE);
    public static final SimpleHolder<FossilsWallSignBlock> CORDAITES_WALL_SIGN = BLOCKS.registerWallSign("cordaites_wall_sign", FABlocks.CORDAITES_SIGN);
    public static final SimpleHolder<DoorBlock> CORDAITES_DOOR = BLOCKS.registerDoor("cordaites_door", FABlockSetTypes.CORDAITES, FABlocks.CORDAITES_PLANKS);
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> CORDAITES_HANGING_SIGN = BLOCKS.registerHangingSign("cordaites_hanging_sign", FAWoodTypes.CORDAITES, FABlocks.CORDAITES_LOG);
    public static final SimpleHolder<FossilsWallHangingSignBlock> CORDAITES_WALL_HANGING_SIGN = BLOCKS.registerWallHangingSign("cordaites_wall_hanging_sign", FABlocks.CORDAITES_HANGING_SIGN);
    public static final SimpleHolder<PressurePlateBlock> CORDAITES_PRESSURE_PLATE = BLOCKS.registerPressurePlate("cordaites_pressure_plate", FABlockSetTypes.CORDAITES, FABlocks.CORDAITES_PLANKS);
    public static final SimpleHolder<FenceBlock> CORDAITES_FENCE = BLOCKS.registerFence("cordaites_fence", FABlocks.CORDAITES_PLANKS);
    public static final SimpleHolder<TrapDoorBlock> CORDAITES_TRAPDOOR = BLOCKS.registerTrapdoor("cordaites_trapdoor", FABlockSetTypes.CORDAITES, MapColor.TERRACOTTA_PURPLE);
    public static final SimpleHolder<FenceGateBlock> CORDAITES_FENCE_GATE = BLOCKS.registerFenceGate("cordaites_fence_gate", FAWoodTypes.CORDAITES, FABlocks.CORDAITES_PLANKS);
    public static final SimpleHolder<FlowerPotBlock> POTTED_CORDAITES_SAPLING = BLOCKS.registerPottedSapling("potted_cordaites_sapling", FABlocks.CORDAITES_SAPLING);
    public static final SimpleHolder<ButtonBlock> CORDAITES_BUTTON = BLOCKS.registerButton("cordaites_button", FABlockSetTypes.CORDAITES);
    public static final SimpleHolder<SlabBlock> CORDAITES_SLAB = BLOCKS.registerSlab("cordaites_slab", MapColor.TERRACOTTA_PURPLE);
    public static final SimpleHolder<Block> WOLLEMIA_PLANKS = BLOCKS.registerPlanks("wollemia_planks", MapColor.TERRACOTTA_GRAY);
    public static final SimpleHolder<SaplingBlock> WOLLEMIA_SAPLING = BLOCKS.registerSapling("wollemia_sapling", FATreeGrowers.WOLLEMIA);
    public static final SimpleHolder<RotatedPillarBlock> WOLLEMIA_LOG = BLOCKS.registerLog("wollemia_log", MapColor.TERRACOTTA_GRAY, MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_WOLLEMIA_LOG = BLOCKS.registerStrippedLog("stripped_wollemia_log", MapColor.TERRACOTTA_GRAY);
    public static final SimpleHolder<RotatedPillarBlock> WOLLEMIA_WOOD = BLOCKS.registerWood("wollemia_wood", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_WOLLEMIA_WOOD = BLOCKS.registerStrippedWood("stripped_wollemia_wood", MapColor.TERRACOTTA_GRAY);
    public static final SimpleHolder<LeavesBlock> WOLLEMIA_LEAVES = BLOCKS.registerLeaves("wollemia_leaves");
    public static final SimpleHolder<StairBlock> WOLLEMIA_STAIRS = BLOCKS.registerStairs("wollemia_stairs", FABlocks.WOLLEMIA_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> WOLLEMIA_SIGN = BLOCKS.registerSign("wollemia_sign", FAWoodTypes.WOLLEMIA, MapColor.TERRACOTTA_GRAY);
    public static final SimpleHolder<FossilsWallSignBlock> WOLLEMIA_WALL_SIGN = BLOCKS.registerWallSign("wollemia_wall_sign", FABlocks.WOLLEMIA_SIGN);
    public static final SimpleHolder<DoorBlock> WOLLEMIA_DOOR = BLOCKS.registerDoor("wollemia_door", FABlockSetTypes.WOLLEMIA, FABlocks.WOLLEMIA_PLANKS);
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> WOLLEMIA_HANGING_SIGN = BLOCKS.registerHangingSign("wollemia_hanging_sign", FAWoodTypes.WOLLEMIA, FABlocks.WOLLEMIA_LOG);
    public static final SimpleHolder<FossilsWallHangingSignBlock> WOLLEMIA_WALL_HANGING_SIGN = BLOCKS.registerWallHangingSign("wollemia_wall_hanging_sign", FABlocks.WOLLEMIA_HANGING_SIGN);
    public static final SimpleHolder<PressurePlateBlock> WOLLEMIA_PRESSURE_PLATE = BLOCKS.registerPressurePlate("wollemia_pressure_plate", FABlockSetTypes.WOLLEMIA, FABlocks.WOLLEMIA_PLANKS);
    public static final SimpleHolder<FenceBlock> WOLLEMIA_FENCE = BLOCKS.registerFence("wollemia_fence", FABlocks.WOLLEMIA_PLANKS);
    public static final SimpleHolder<TrapDoorBlock> WOLLEMIA_TRAPDOOR = BLOCKS.registerTrapdoor("wollemia_trapdoor", FABlockSetTypes.WOLLEMIA, MapColor.TERRACOTTA_GRAY);
    public static final SimpleHolder<FenceGateBlock> WOLLEMIA_FENCE_GATE = BLOCKS.registerFenceGate("wollemia_fence_gate", FAWoodTypes.WOLLEMIA, FABlocks.WOLLEMIA_PLANKS);
    public static final SimpleHolder<FlowerPotBlock> POTTED_WOLLEMIA_SAPLING = BLOCKS.registerPottedSapling("potted_wollemia_sapling", FABlocks.WOLLEMIA_SAPLING);
    public static final SimpleHolder<ButtonBlock> WOLLEMIA_BUTTON = BLOCKS.registerButton("wollemia_button", FABlockSetTypes.WOLLEMIA);
    public static final SimpleHolder<SlabBlock> WOLLEMIA_SLAB = BLOCKS.registerSlab("wollemia_slab", MapColor.TERRACOTTA_GRAY);
    public static final SimpleHolder<Block> METASEQUOIA_PLANKS = BLOCKS.registerPlanks("metasequoia_planks", MapColor.TERRACOTTA_RED);
    public static final SimpleHolder<SaplingBlock> METASEQUOIA_SAPLING = BLOCKS.registerSapling("metasequoia_sapling", FATreeGrowers.METASEQUOIA);
    public static final SimpleHolder<RotatedPillarBlock> METASEQUOIA_LOG = BLOCKS.registerLog("metasequoia_log", MapColor.TERRACOTTA_RED, MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_METASEQUOIA_LOG = BLOCKS.registerStrippedLog("stripped_metasequoia_log", MapColor.TERRACOTTA_RED);
    public static final SimpleHolder<RotatedPillarBlock> METASEQUOIA_WOOD = BLOCKS.registerWood("metasequoia_wood", MapColor.TERRACOTTA_BROWN);
    public static final SimpleHolder<RotatedPillarBlock> STRIPPED_METASEQUOIA_WOOD = BLOCKS.registerStrippedWood("stripped_metasequoia_wood", MapColor.TERRACOTTA_RED);
    public static final SimpleHolder<LeavesBlock> METASEQUOIA_LEAVES = BLOCKS.registerLeaves("metasequoia_leaves");
    public static final SimpleHolder<StairBlock> METASEQUOIA_STAIRS = BLOCKS.registerStairs("metasequoia_stairs", FABlocks.METASEQUOIA_PLANKS);
    public static final SimpleHolder<FossilsStandingSignBlock> METASEQUOIA_SIGN = BLOCKS.registerSign("metasequoia_sign", FAWoodTypes.METASEQUOIA, MapColor.TERRACOTTA_RED);
    public static final SimpleHolder<FossilsWallSignBlock> METASEQUOIA_WALL_SIGN = BLOCKS.registerWallSign("metasequoia_wall_sign", FABlocks.METASEQUOIA_SIGN);
    public static final SimpleHolder<DoorBlock> METASEQUOIA_DOOR = BLOCKS.registerDoor("metasequoia_door", FABlockSetTypes.METASEQUOIA, FABlocks.METASEQUOIA_PLANKS);
    public static final SimpleHolder<FossilsCeilingHangingSignBlock> METASEQUOIA_HANGING_SIGN = BLOCKS.registerHangingSign("metasequoia_hanging_sign", FAWoodTypes.METASEQUOIA, FABlocks.METASEQUOIA_LOG);
    public static final SimpleHolder<FossilsWallHangingSignBlock> METASEQUOIA_WALL_HANGING_SIGN = BLOCKS.registerWallHangingSign("metasequoia_wall_hanging_sign", FABlocks.METASEQUOIA_HANGING_SIGN);
    public static final SimpleHolder<PressurePlateBlock> METASEQUOIA_PRESSURE_PLATE = BLOCKS.registerPressurePlate("metasequoia_pressure_plate", FABlockSetTypes.METASEQUOIA, FABlocks.METASEQUOIA_PLANKS);
    public static final SimpleHolder<FenceBlock> METASEQUOIA_FENCE = BLOCKS.registerFence("metasequoia_fence", FABlocks.METASEQUOIA_PLANKS);
    public static final SimpleHolder<TrapDoorBlock> METASEQUOIA_TRAPDOOR = BLOCKS.registerTrapdoor("metasequoia_trapdoor", FABlockSetTypes.METASEQUOIA, MapColor.TERRACOTTA_RED);
    public static final SimpleHolder<FenceGateBlock> METASEQUOIA_FENCE_GATE = BLOCKS.registerFenceGate("metasequoia_fence_gate", FAWoodTypes.METASEQUOIA, FABlocks.METASEQUOIA_PLANKS);
    public static final SimpleHolder<FlowerPotBlock> POTTED_METASEQUOIA_SAPLING = BLOCKS.registerPottedSapling("potted_metasequoia_sapling", FABlocks.METASEQUOIA_SAPLING);
    public static final SimpleHolder<ButtonBlock> METASEQUOIA_BUTTON = BLOCKS.registerButton("metasequoia_button", FABlockSetTypes.METASEQUOIA);
    public static final SimpleHolder<SlabBlock> METASEQUOIA_SLAB = BLOCKS.registerSlab("metasequoia_slab", MapColor.TERRACOTTA_RED);
    public static final SimpleHolder<TarBlock> TAR = BLOCKS.registerBlock("tar", properties -> new TarBlock(FAFluids.TAR.get(), properties), () -> BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).replaceable().noCollission().strength(100.0F).pushReaction(PushReaction.DESTROY).noLootTable().liquid().sound(SoundType.EMPTY));

    public static BlockBehaviour.Properties flowerPotProperties() {
        return BlockBehaviour.Properties.of().instabreak().noOcclusion().pushReaction(PushReaction.DESTROY);
    }

    public static BlockBehaviour.Properties buttonProperties() {
        return BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY);
    }

    public static BlockBehaviour.Properties logProperties(MapColor topMapColor, MapColor sideMapColor) {
        return BlockBehaviour.Properties.of().mapColor(blockState -> blockState.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? topMapColor : sideMapColor).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava();
    }

    public static BlockBehaviour.Properties leavesProperties(SoundType soundType) {
        return BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).strength(0.2F).randomTicks().sound(soundType).noOcclusion().isValidSpawn(BlockUtils::ocelotOrParrot).isSuffocating(BlockUtils::never).isViewBlocking(BlockUtils::never).ignitedByLava().pushReaction(PushReaction.DESTROY).isRedstoneConductor(BlockUtils::never);
    }

    private static SimpleHolder<StairBlock> registerStair(String name, Supplier<Block> block) {
        return BLOCKS.registerBlock(name, properties -> new StairBlock(block.get().defaultBlockState(), properties), () -> BlockBehaviour.Properties.ofFullCopy(block.get()));
    }

    private static SimpleHolder<FossilsWallSignBlock> registerWallSign(String name, WoodType woodType, Supplier<? extends Block> block, Supplier<BlockBehaviour.Properties> properties) {
        return BLOCKS.registerBlock(name, propertiesIn -> new FossilsWallSignBlock(woodType, propertiesIn), () -> properties.get().overrideLootTable(block.get().getLootTable()).overrideDescription(block.get().getDescriptionId()));
    }

    private static SimpleHolder<FossilsWallHangingSignBlock> registerWallHangingSign(String name, WoodType woodType, Supplier<? extends Block> block, Supplier<BlockBehaviour.Properties> properties) {
        return BLOCKS.registerBlock(name, propertiesIn -> new FossilsWallHangingSignBlock(woodType, propertiesIn), () -> properties.get().overrideLootTable(block.get().getLootTable()).overrideDescription(block.get().getDescriptionId()));
    }

    public static BlockBehaviour.Properties wallVariant(Block base, boolean overrideDescription) {
        return FABlocks.wallVariant(base, BlockBehaviour.Properties.of(), overrideDescription);
    }

    public static BlockBehaviour.Properties wallVariant(Block base, BlockBehaviour.Properties properties, boolean overrideDescription) {
        properties = properties.overrideLootTable(base.getLootTable());
        if (overrideDescription) {
            properties = properties.overrideDescription(base.getDescriptionId());
        }

        return properties;
    }
}
