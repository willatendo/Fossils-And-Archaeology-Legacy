plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
    id 'com.modrinth.minotaur' version '[2,3)'
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modApi include("simplelibrary:simplelibrary-fabric:${simple_library_version}")
    modImplementation include("com.github.Chocohead:Fabric-ASM:v${project.mm_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    api "fuzs.forgeconfigapiport:forgeconfigapiport-common-neoforgeapi:${forge_config_api_version}"
    api "fuzs.forgeconfigapiport:forgeconfigapiport-common-forgeapi:${forge_config_api_version}"
    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forge_config_api_version}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation "com.terraformersmc:modmenu:${mod_menu_version}"

    modImplementation "mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "fossils-and-archaeology-legacy"
    versionNumber = "${mod_version}"
    versionName = "${mod_version_name}"
    versionType = "release"
    uploadFile = remapJar
    gameVersions = ["${minecraft_version}"]
    loaders = ["fabric"]
    File f = new File("$rootDir/changelog-${mod_version}.md")
    if (f.exists()) {
        changelog = f.text
    }
    dependencies {
        required.project "fabric-api"
        optional.project "cloth-config"
        optional.project "modmenu"
        optional.project "forge-config-api-port"
        optional.project "jei"
    }
}