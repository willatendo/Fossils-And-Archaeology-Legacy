plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
    id 'com.modrinth.minotaur' version '[2,3)'
}

dependencies {
    implementation "simplelibrary:simplelibrary-neoforge:${simple_library_version}"
    jarJar(group: 'simplelibrary', name: 'simplelibrary-neoforge', version: "[${simple_library_version},4.0.0)")

    implementation "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
}

neoForge {
    version = neoforge_version
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.add(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})"
        }
        client {
            client()
        }
        data {
            data()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "fossils-and-archaeology-legacy"
    versionNumber = "${mod_version}"
    versionName = "${mod_version_name}"
    versionType = "release"
    uploadFile = tasks.jarJar
    gameVersions = ["${minecraft_version}"]
    loaders = ["neoforge"]
    File f = new File("$rootDir/changelog-${mod_version}.md")
    if (f.exists()) {
        changelog = f.text
    }
    dependencies {
        optional.project "jei"
    }
}