package willatendo.fossilslegacy.data.advancement;

import net.minecraft.advancements.Advancement;
import net.minecraft.advancements.AdvancementHolder;
import net.minecraft.advancements.AdvancementRequirements;
import net.minecraft.advancements.AdvancementType;
import net.minecraft.advancements.critereon.*;
import net.minecraft.core.HolderLookup;
import net.neoforged.neoforge.common.data.AdvancementProvider;
import net.neoforged.neoforge.common.data.ExistingFileHelper;
import willatendo.fossilslegacy.server.block.FABlocks;
import willatendo.fossilslegacy.server.criteria.criterias.CreateZombifiedPigmanTrigger;
import willatendo.fossilslegacy.server.criteria.criterias.SummonAnuTrigger;
import willatendo.fossilslegacy.server.criteria.criterias.TameZombifiedPigmanTrigger;
import willatendo.fossilslegacy.server.item.FAItems;
import willatendo.fossilslegacy.server.level.FALevels;
import willatendo.fossilslegacy.server.utils.FossilsLegacyUtils;

import java.util.function.Consumer;

public class LegacyAdvancementGenerator implements AdvancementProvider.AdvancementGenerator {
    @Override
    public void generate(HolderLookup.Provider registries, Consumer<AdvancementHolder> advancementHolderConsumer, ExistingFileHelper existingFileHelper) {
        AdvancementHolder legacyRoot = Advancement.Builder.advancement().display(FABlocks.FOSSIL_ORE.get(), FossilsLegacyUtils.translation("advancements", "legacy.root.title"), FossilsLegacyUtils.translation("advancements", "legacy.root.desc"), FossilsLegacyUtils.mc("textures/gui/advancements/backgrounds/stone.png"), AdvancementType.TASK, false, false, false).addCriterion("ticks", PlayerTrigger.TriggerInstance.tick()).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/root").toString());
        AdvancementHolder fossils = Advancement.Builder.advancement().parent(legacyRoot).display(FAItems.FOSSIL.get(), FossilsLegacyUtils.translation("advancements", "legacy.fossil.title"), FossilsLegacyUtils.translation("advancements", "legacy.fossil.desc"), null, AdvancementType.TASK, true, true, true).addCriterion("has_fossil", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.FOSSIL.get())).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/fossil").toString());
        Advancement.Builder.advancement().parent(fossils).display(FABlocks.ANALYZER.get(), FossilsLegacyUtils.translation("advancements", "legacy.analyzer.title"), FossilsLegacyUtils.translation("advancements", "legacy.analyzer.desc"), null, AdvancementType.TASK, true, true, true).addCriterion("has_analyzer", InventoryChangeTrigger.TriggerInstance.hasItems(FABlocks.ANALYZER.get())).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/analyzer").toString());
        Advancement.Builder.advancement().parent(fossils).display(FABlocks.PALAEONTOLOGY_TABLE.get(), FossilsLegacyUtils.translation("advancements", "legacy.palaeontology_table.title"), FossilsLegacyUtils.translation("advancements", "legacy.palaeontology_table.desc"), null, AdvancementType.TASK, true, true, true).addCriterion("has_palaeontology_table", InventoryChangeTrigger.TriggerInstance.hasItems(FABlocks.PALAEONTOLOGY_TABLE.get())).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/palaeontology_table").toString());
        AdvancementHolder relicScraps = Advancement.Builder.advancement().parent(legacyRoot).display(FAItems.RELIC_SCRAP.get(), FossilsLegacyUtils.translation("advancements", "legacy.relic_scrap.title"), FossilsLegacyUtils.translation("advancements", "legacy.relic_scrap.desc"), null, AdvancementType.TASK, true, true, true).addCriterion("has_relic_scrap", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.RELIC_SCRAP.get())).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/relic_scrap").toString());
        AdvancementHolder ancientSwordArtifact = Advancement.Builder.advancement().parent(relicScraps).display(FAItems.ANCIENT_SWORD_ARTIFACT.get(), FossilsLegacyUtils.translation("advancements", "legacy.ancient_sword_artifact.title"), FossilsLegacyUtils.translation("advancements", "legacy.ancient_sword_artifact.desc"), null, AdvancementType.TASK, true, true, true).addCriterion("has_sword_artifact", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.ANCIENT_SWORD_ARTIFACT.get())).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/sword_artifact").toString());
        AdvancementHolder ancientSword = Advancement.Builder.advancement().parent(ancientSwordArtifact).display(FAItems.ANCIENT_SWORD.get(), FossilsLegacyUtils.translation("advancements", "legacy.ancient_sword.title"), FossilsLegacyUtils.translation("advancements", "legacy.ancient_sword.desc"), null, AdvancementType.TASK, true, true, true).addCriterion("has_ancient_sword", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.ANCIENT_SWORD.get())).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/ancient_sword").toString());
        Advancement.Builder.advancement().parent(ancientSword).display(FAItems.ANCIENT_SWORD.get(), FossilsLegacyUtils.translation("advancements", "legacy.pigman.title"), FossilsLegacyUtils.translation("advancements", "legacy.pigman.desc"), null, AdvancementType.TASK, true, true, true).addCriterion("created_pigman", CreateZombifiedPigmanTrigger.TriggerInstance.zombifiedPiglin()).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/pigman").toString());
        AdvancementHolder ancientHelmetArtifact = Advancement.Builder.advancement().parent(relicScraps).display(FAItems.ANCIENT_HELMET_ARTIFACT.get(), FossilsLegacyUtils.translation("advancements", "legacy.ancient_helmet_artifact.title"), FossilsLegacyUtils.translation("advancements", "legacy.ancient_helmet_artifact.desc"), null, AdvancementType.TASK, true, true, true).addCriterion("has_helmet_artifact", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.ANCIENT_HELMET_ARTIFACT.get())).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/helmet_artifact").toString());
        AdvancementHolder fixedAncientArmor = Advancement.Builder.advancement().parent(ancientHelmetArtifact).display(FAItems.ANCIENT_HELMET.get(), FossilsLegacyUtils.translation("advancements", "legacy.fixed_ancient_armor.title"), FossilsLegacyUtils.translation("advancements", "legacy.fixed_ancient_armor.desc"), null, AdvancementType.TASK, true, true, true).requirements(AdvancementRequirements.Strategy.OR).addCriterion("has_helmet", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.ANCIENT_HELMET.get())).addCriterion("has_chestplate", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.ANCIENT_CHESTPLATE.get())).addCriterion("has_leggings", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.ANCIENT_LEGGINGS.get())).addCriterion("has_boots", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.ANCIENT_BOOTS.get())).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/fixed_ancient_armor").toString());
        AdvancementHolder deckedOut = Advancement.Builder.advancement().parent(fixedAncientArmor).display(FAItems.ANCIENT_CHESTPLATE.get(), FossilsLegacyUtils.translation("advancements", "legacy.decked_out.title"), FossilsLegacyUtils.translation("advancements", "legacy.decked_out.desc"), null, AdvancementType.GOAL, true, true, true).requirements(AdvancementRequirements.Strategy.AND).addCriterion("has_helmet", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.ANCIENT_HELMET.get())).addCriterion("has_chestplate", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.ANCIENT_CHESTPLATE.get())).addCriterion("has_leggings", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.ANCIENT_LEGGINGS.get())).addCriterion("has_boots", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.ANCIENT_BOOTS.get())).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/decked_out").toString());
        Advancement.Builder.advancement().parent(deckedOut).display(FAItems.ANCIENT_HELMET.get(), FossilsLegacyUtils.translation("advancements", "legacy.tamed_pigman.title"), FossilsLegacyUtils.translation("advancements", "legacy.tamed_pigman.desc"), null, AdvancementType.GOAL, true, true, true).addCriterion("tamed_pigman", TameZombifiedPigmanTrigger.TriggerInstance.tamedZombifiedPiglin()).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/tamed_pigman").toString());
        AdvancementHolder archaeologyWorkbench = Advancement.Builder.advancement().parent(relicScraps).display(FABlocks.ARCHAEOLOGY_WORKBENCH.get(), FossilsLegacyUtils.translation("advancements", "legacy.archaeology_workbench.title"), FossilsLegacyUtils.translation("advancements", "legacy.archaeology_workbench.desc"), null, AdvancementType.TASK, true, true, true).addCriterion("has_archaeology_workbench", InventoryChangeTrigger.TriggerInstance.hasItems(FABlocks.ARCHAEOLOGY_WORKBENCH.get())).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/archaeology_workbench").toString());
        Advancement.Builder.advancement().parent(archaeologyWorkbench).display(FAItems.STONE_TABLET.get(), FossilsLegacyUtils.translation("advancements", "legacy.stone_tablet.title"), FossilsLegacyUtils.translation("advancements", "legacy.stone_tablet.desc"), null, AdvancementType.TASK, true, true, true).addCriterion("used_stone_tablet", ItemUsedOnLocationTrigger.TriggerInstance.itemUsedOnBlock(LocationPredicate.Builder.location(), ItemPredicate.Builder.item().of(FAItems.STONE_TABLET.get()))).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/stone_tablet").toString());
        AdvancementHolder skullBlock = Advancement.Builder.advancement().parent(legacyRoot).display(FABlocks.SKULL_BLOCK.get(), FossilsLegacyUtils.translation("advancements", "legacy.skull_block.title"), FossilsLegacyUtils.translation("advancements", "legacy.skull_block.desc"), null, AdvancementType.TASK, true, true, true).addCriterion("has_skull_block", InventoryChangeTrigger.TriggerInstance.hasItems(FABlocks.SKULL_BLOCK.get())).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/skull_block").toString());
        Advancement.Builder.advancement().parent(skullBlock).display(FABlocks.TIME_MACHINE.get(), FossilsLegacyUtils.translation("advancements", "legacy.anu.title"), FossilsLegacyUtils.translation("advancements", "legacy.anu.desc"), null, AdvancementType.GOAL, true, true, true).addCriterion("summoned_anu", SummonAnuTrigger.TriggerInstance.summonAnu()).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/anu").toString());
        AdvancementHolder prehistoricCoin = Advancement.Builder.advancement().parent(legacyRoot).display(FAItems.PREHISTORIC_COIN.get(), FossilsLegacyUtils.translation("advancements", "legacy.prehistoric_coin.title"), FossilsLegacyUtils.translation("advancements", "legacy.prehistoric_coin.desc"), null, AdvancementType.TASK, true, true, true).addCriterion("has_prehistoric_coin", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.PREHISTORIC_COIN.get())).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/prehistoric_coin").toString());
        Advancement.Builder.advancement().parent(prehistoricCoin).display(FAItems.OVERWORLD_COIN.get(), FossilsLegacyUtils.translation("advancements", "legacy.overworld_coin.title"), FossilsLegacyUtils.translation("advancements", "legacy.overworld_coin.desc"), null, AdvancementType.TASK, true, true, true).addCriterion("has_overworld_coin", InventoryChangeTrigger.TriggerInstance.hasItems(FAItems.OVERWORLD_COIN.get())).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/overworld_coin").toString());
        Advancement.Builder.advancement().parent(prehistoricCoin).display(FABlocks.TIME_MACHINE.get(), FossilsLegacyUtils.translation("advancements", "legacy.time_machine.title"), FossilsLegacyUtils.translation("advancements", "legacy.time_machine.desc"), null, AdvancementType.GOAL, true, true, true).addCriterion("time_travelled", ChangeDimensionTrigger.TriggerInstance.changedDimensionTo(FALevels.PREHISTORY)).save(advancementHolderConsumer, FossilsLegacyUtils.resource("legacy/time_machine").toString());
    }
}
