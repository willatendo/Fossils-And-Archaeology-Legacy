plugins {
    id 'java-library'
    id 'maven-publish'
}

base {
    archivesName = "${mod_id}-${mod_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
}

repositories {
    mavenCentral()
    exclusiveContent {
        forRepository {
            maven {
                name = 'Sponge'
                url = 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
        filter { includeGroupAndSubgroups("org.spongepowered") }
    }
    // ASM
    maven { url "https://jitpack.io" }

    // Cloth Config
    maven { url "https://maven.shedaniel.me/" }

    // Cloth Config + Mod Menu
    maven { url "https://maven.terraformersmc.com/releases/" }

    // Forge Config API Port
    maven { url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }

    // SimpleLibrary
    maven { url "https://raw.githubusercontent.com/willatendo/Willatendo-Mods/main/builds/" }

    // JEI
    maven { url = "https://maven.blamejared.com/" }
    maven { url = "https://modmaven.dev" }
}

['apiElements', 'runtimeElements'].each { variant ->
    configurations."$variant".outgoing {
        capability("$group:${base.archivesName.get()}:$version")
        capability("$group:$mod_id-${project.name}-${minecraft_version}:$version")
        capability("$group:$mod_id:$version")
    }
    publishing.publications.configureEach {
        suppressPomMetadataWarningsFor(variant)
    }
}

processResources {
    def expandProps = [
            "version"                : mod_version,
            "group"                  : project.group,
            "minecraft_version"      : minecraft_version,
            "minecraft_version_range": minecraft_version_range,
            "fabric_version"         : fabric_version,
            "fabric_loader_version"  : fabric_loader_version,
            "mod_name"               : mod_name,
            "mod_author"             : mod_author,
            "mod_id"                 : mod_id,
            "license"                : license,
            "description"            : project.description,
            "neoforge_version"       : neoforge_version,
            "neoforge_version_range" : neoforge_version_range,
            "java_version"           : java_version,
            "homepage"               : homepage,
            "issue_tracker"          : issue_tracker,
            "update_tracker"         : update_tracker
    ]

    filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
        expand expandProps
    }
    inputs.properties(expandProps)
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url System.getenv("local_maven_url")
        }
    }
}
